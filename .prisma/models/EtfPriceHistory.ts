
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `EtfPriceHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EtfPriceHistory
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type EtfPriceHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$EtfPriceHistoryPayload>

export type AggregateEtfPriceHistory = {
  _count: EtfPriceHistoryCountAggregateOutputType | null
  _avg: EtfPriceHistoryAvgAggregateOutputType | null
  _sum: EtfPriceHistorySumAggregateOutputType | null
  _min: EtfPriceHistoryMinAggregateOutputType | null
  _max: EtfPriceHistoryMaxAggregateOutputType | null
}

export type EtfPriceHistoryAvgAggregateOutputType = {
  priceIdx: number | null
}

export type EtfPriceHistorySumAggregateOutputType = {
  priceIdx: number | null
}

export type EtfPriceHistoryMinAggregateOutputType = {
  priceIdx: number | null
  market: string | null
  stockCode: string | null
  open: string | null
  high: string | null
  low: string | null
  price: string | null
  lastDayPrice: string | null
  h52p: string | null
  l52p: string | null
  tXprc: string | null
  tXdif: string | null
  tXrat: string | null
  tRate: string | null
  regDate: Date | null
}

export type EtfPriceHistoryMaxAggregateOutputType = {
  priceIdx: number | null
  market: string | null
  stockCode: string | null
  open: string | null
  high: string | null
  low: string | null
  price: string | null
  lastDayPrice: string | null
  h52p: string | null
  l52p: string | null
  tXprc: string | null
  tXdif: string | null
  tXrat: string | null
  tRate: string | null
  regDate: Date | null
}

export type EtfPriceHistoryCountAggregateOutputType = {
  priceIdx: number
  market: number
  stockCode: number
  open: number
  high: number
  low: number
  price: number
  lastDayPrice: number
  h52p: number
  l52p: number
  tXprc: number
  tXdif: number
  tXrat: number
  tRate: number
  regDate: number
  _all: number
}


export type EtfPriceHistoryAvgAggregateInputType = {
  priceIdx?: true
}

export type EtfPriceHistorySumAggregateInputType = {
  priceIdx?: true
}

export type EtfPriceHistoryMinAggregateInputType = {
  priceIdx?: true
  market?: true
  stockCode?: true
  open?: true
  high?: true
  low?: true
  price?: true
  lastDayPrice?: true
  h52p?: true
  l52p?: true
  tXprc?: true
  tXdif?: true
  tXrat?: true
  tRate?: true
  regDate?: true
}

export type EtfPriceHistoryMaxAggregateInputType = {
  priceIdx?: true
  market?: true
  stockCode?: true
  open?: true
  high?: true
  low?: true
  price?: true
  lastDayPrice?: true
  h52p?: true
  l52p?: true
  tXprc?: true
  tXdif?: true
  tXrat?: true
  tRate?: true
  regDate?: true
}

export type EtfPriceHistoryCountAggregateInputType = {
  priceIdx?: true
  market?: true
  stockCode?: true
  open?: true
  high?: true
  low?: true
  price?: true
  lastDayPrice?: true
  h52p?: true
  l52p?: true
  tXprc?: true
  tXdif?: true
  tXrat?: true
  tRate?: true
  regDate?: true
  _all?: true
}

export type EtfPriceHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EtfPriceHistory to aggregate.
   */
  where?: Prisma.EtfPriceHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfPriceHistories to fetch.
   */
  orderBy?: Prisma.EtfPriceHistoryOrderByWithRelationInput | Prisma.EtfPriceHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EtfPriceHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfPriceHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfPriceHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EtfPriceHistories
  **/
  _count?: true | EtfPriceHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EtfPriceHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EtfPriceHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EtfPriceHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EtfPriceHistoryMaxAggregateInputType
}

export type GetEtfPriceHistoryAggregateType<T extends EtfPriceHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateEtfPriceHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEtfPriceHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateEtfPriceHistory[P]>
}




export type EtfPriceHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EtfPriceHistoryWhereInput
  orderBy?: Prisma.EtfPriceHistoryOrderByWithAggregationInput | Prisma.EtfPriceHistoryOrderByWithAggregationInput[]
  by: Prisma.EtfPriceHistoryScalarFieldEnum[] | Prisma.EtfPriceHistoryScalarFieldEnum
  having?: Prisma.EtfPriceHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EtfPriceHistoryCountAggregateInputType | true
  _avg?: EtfPriceHistoryAvgAggregateInputType
  _sum?: EtfPriceHistorySumAggregateInputType
  _min?: EtfPriceHistoryMinAggregateInputType
  _max?: EtfPriceHistoryMaxAggregateInputType
}

export type EtfPriceHistoryGroupByOutputType = {
  priceIdx: number
  market: string
  stockCode: string
  open: string | null
  high: string | null
  low: string | null
  price: string | null
  lastDayPrice: string | null
  h52p: string | null
  l52p: string | null
  tXprc: string | null
  tXdif: string | null
  tXrat: string | null
  tRate: string | null
  regDate: Date | null
  _count: EtfPriceHistoryCountAggregateOutputType | null
  _avg: EtfPriceHistoryAvgAggregateOutputType | null
  _sum: EtfPriceHistorySumAggregateOutputType | null
  _min: EtfPriceHistoryMinAggregateOutputType | null
  _max: EtfPriceHistoryMaxAggregateOutputType | null
}

type GetEtfPriceHistoryGroupByPayload<T extends EtfPriceHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EtfPriceHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EtfPriceHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EtfPriceHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EtfPriceHistoryGroupByOutputType[P]>
      }
    >
  >



export type EtfPriceHistoryWhereInput = {
  AND?: Prisma.EtfPriceHistoryWhereInput | Prisma.EtfPriceHistoryWhereInput[]
  OR?: Prisma.EtfPriceHistoryWhereInput[]
  NOT?: Prisma.EtfPriceHistoryWhereInput | Prisma.EtfPriceHistoryWhereInput[]
  priceIdx?: Prisma.IntFilter<"EtfPriceHistory"> | number
  market?: Prisma.StringFilter<"EtfPriceHistory"> | string
  stockCode?: Prisma.StringFilter<"EtfPriceHistory"> | string
  open?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  high?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  low?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  price?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  lastDayPrice?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  h52p?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  l52p?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  tXprc?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  tXdif?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  tXrat?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  tRate?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  regDate?: Prisma.DateTimeNullableFilter<"EtfPriceHistory"> | Date | string | null
}

export type EtfPriceHistoryOrderByWithRelationInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrderInput | Prisma.SortOrder
  high?: Prisma.SortOrderInput | Prisma.SortOrder
  low?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrderInput | Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrderInput | Prisma.SortOrder
  h52p?: Prisma.SortOrderInput | Prisma.SortOrder
  l52p?: Prisma.SortOrderInput | Prisma.SortOrder
  tXprc?: Prisma.SortOrderInput | Prisma.SortOrder
  tXdif?: Prisma.SortOrderInput | Prisma.SortOrder
  tXrat?: Prisma.SortOrderInput | Prisma.SortOrder
  tRate?: Prisma.SortOrderInput | Prisma.SortOrder
  regDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.EtfPriceHistoryOrderByRelevanceInput
}

export type EtfPriceHistoryWhereUniqueInput = Prisma.AtLeast<{
  priceIdx?: number
  AND?: Prisma.EtfPriceHistoryWhereInput | Prisma.EtfPriceHistoryWhereInput[]
  OR?: Prisma.EtfPriceHistoryWhereInput[]
  NOT?: Prisma.EtfPriceHistoryWhereInput | Prisma.EtfPriceHistoryWhereInput[]
  market?: Prisma.StringFilter<"EtfPriceHistory"> | string
  stockCode?: Prisma.StringFilter<"EtfPriceHistory"> | string
  open?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  high?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  low?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  price?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  lastDayPrice?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  h52p?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  l52p?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  tXprc?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  tXdif?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  tXrat?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  tRate?: Prisma.StringNullableFilter<"EtfPriceHistory"> | string | null
  regDate?: Prisma.DateTimeNullableFilter<"EtfPriceHistory"> | Date | string | null
}, "priceIdx">

export type EtfPriceHistoryOrderByWithAggregationInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrderInput | Prisma.SortOrder
  high?: Prisma.SortOrderInput | Prisma.SortOrder
  low?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrderInput | Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrderInput | Prisma.SortOrder
  h52p?: Prisma.SortOrderInput | Prisma.SortOrder
  l52p?: Prisma.SortOrderInput | Prisma.SortOrder
  tXprc?: Prisma.SortOrderInput | Prisma.SortOrder
  tXdif?: Prisma.SortOrderInput | Prisma.SortOrder
  tXrat?: Prisma.SortOrderInput | Prisma.SortOrder
  tRate?: Prisma.SortOrderInput | Prisma.SortOrder
  regDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.EtfPriceHistoryCountOrderByAggregateInput
  _avg?: Prisma.EtfPriceHistoryAvgOrderByAggregateInput
  _max?: Prisma.EtfPriceHistoryMaxOrderByAggregateInput
  _min?: Prisma.EtfPriceHistoryMinOrderByAggregateInput
  _sum?: Prisma.EtfPriceHistorySumOrderByAggregateInput
}

export type EtfPriceHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.EtfPriceHistoryScalarWhereWithAggregatesInput | Prisma.EtfPriceHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.EtfPriceHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EtfPriceHistoryScalarWhereWithAggregatesInput | Prisma.EtfPriceHistoryScalarWhereWithAggregatesInput[]
  priceIdx?: Prisma.IntWithAggregatesFilter<"EtfPriceHistory"> | number
  market?: Prisma.StringWithAggregatesFilter<"EtfPriceHistory"> | string
  stockCode?: Prisma.StringWithAggregatesFilter<"EtfPriceHistory"> | string
  open?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  high?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  low?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  price?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  lastDayPrice?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  h52p?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  l52p?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  tXprc?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  tXdif?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  tXrat?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  tRate?: Prisma.StringNullableWithAggregatesFilter<"EtfPriceHistory"> | string | null
  regDate?: Prisma.DateTimeNullableWithAggregatesFilter<"EtfPriceHistory"> | Date | string | null
}

export type EtfPriceHistoryCreateInput = {
  market: string
  stockCode: string
  open?: string | null
  high?: string | null
  low?: string | null
  price?: string | null
  lastDayPrice?: string | null
  h52p?: string | null
  l52p?: string | null
  tXprc?: string | null
  tXdif?: string | null
  tXrat?: string | null
  tRate?: string | null
  regDate?: Date | string | null
}

export type EtfPriceHistoryUncheckedCreateInput = {
  priceIdx?: number
  market: string
  stockCode: string
  open?: string | null
  high?: string | null
  low?: string | null
  price?: string | null
  lastDayPrice?: string | null
  h52p?: string | null
  l52p?: string | null
  tXprc?: string | null
  tXdif?: string | null
  tXrat?: string | null
  tRate?: string | null
  regDate?: Date | string | null
}

export type EtfPriceHistoryUpdateInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  open?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  high?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  low?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastDayPrice?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  h52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  l52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXprc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXdif?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXrat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type EtfPriceHistoryUncheckedUpdateInput = {
  priceIdx?: Prisma.IntFieldUpdateOperationsInput | number
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  open?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  high?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  low?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastDayPrice?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  h52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  l52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXprc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXdif?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXrat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type EtfPriceHistoryCreateManyInput = {
  priceIdx?: number
  market: string
  stockCode: string
  open?: string | null
  high?: string | null
  low?: string | null
  price?: string | null
  lastDayPrice?: string | null
  h52p?: string | null
  l52p?: string | null
  tXprc?: string | null
  tXdif?: string | null
  tXrat?: string | null
  tRate?: string | null
  regDate?: Date | string | null
}

export type EtfPriceHistoryUpdateManyMutationInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  open?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  high?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  low?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastDayPrice?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  h52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  l52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXprc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXdif?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXrat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type EtfPriceHistoryUncheckedUpdateManyInput = {
  priceIdx?: Prisma.IntFieldUpdateOperationsInput | number
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  open?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  high?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  low?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastDayPrice?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  h52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  l52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXprc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXdif?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXrat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type EtfPriceHistoryOrderByRelevanceInput = {
  fields: Prisma.EtfPriceHistoryOrderByRelevanceFieldEnum | Prisma.EtfPriceHistoryOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type EtfPriceHistoryCountOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrder
  high?: Prisma.SortOrder
  low?: Prisma.SortOrder
  price?: Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrder
  h52p?: Prisma.SortOrder
  l52p?: Prisma.SortOrder
  tXprc?: Prisma.SortOrder
  tXdif?: Prisma.SortOrder
  tXrat?: Prisma.SortOrder
  tRate?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
}

export type EtfPriceHistoryAvgOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
}

export type EtfPriceHistoryMaxOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrder
  high?: Prisma.SortOrder
  low?: Prisma.SortOrder
  price?: Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrder
  h52p?: Prisma.SortOrder
  l52p?: Prisma.SortOrder
  tXprc?: Prisma.SortOrder
  tXdif?: Prisma.SortOrder
  tXrat?: Prisma.SortOrder
  tRate?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
}

export type EtfPriceHistoryMinOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrder
  high?: Prisma.SortOrder
  low?: Prisma.SortOrder
  price?: Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrder
  h52p?: Prisma.SortOrder
  l52p?: Prisma.SortOrder
  tXprc?: Prisma.SortOrder
  tXdif?: Prisma.SortOrder
  tXrat?: Prisma.SortOrder
  tRate?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
}

export type EtfPriceHistorySumOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type EtfPriceHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  priceIdx?: boolean
  market?: boolean
  stockCode?: boolean
  open?: boolean
  high?: boolean
  low?: boolean
  price?: boolean
  lastDayPrice?: boolean
  h52p?: boolean
  l52p?: boolean
  tXprc?: boolean
  tXdif?: boolean
  tXrat?: boolean
  tRate?: boolean
  regDate?: boolean
}, ExtArgs["result"]["etfPriceHistory"]>



export type EtfPriceHistorySelectScalar = {
  priceIdx?: boolean
  market?: boolean
  stockCode?: boolean
  open?: boolean
  high?: boolean
  low?: boolean
  price?: boolean
  lastDayPrice?: boolean
  h52p?: boolean
  l52p?: boolean
  tXprc?: boolean
  tXdif?: boolean
  tXrat?: boolean
  tRate?: boolean
  regDate?: boolean
}

export type EtfPriceHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"priceIdx" | "market" | "stockCode" | "open" | "high" | "low" | "price" | "lastDayPrice" | "h52p" | "l52p" | "tXprc" | "tXdif" | "tXrat" | "tRate" | "regDate", ExtArgs["result"]["etfPriceHistory"]>

export type $EtfPriceHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EtfPriceHistory"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    priceIdx: number
    market: string
    stockCode: string
    open: string | null
    high: string | null
    low: string | null
    price: string | null
    lastDayPrice: string | null
    h52p: string | null
    l52p: string | null
    tXprc: string | null
    tXdif: string | null
    tXrat: string | null
    tRate: string | null
    regDate: Date | null
  }, ExtArgs["result"]["etfPriceHistory"]>
  composites: {}
}

export type EtfPriceHistoryGetPayload<S extends boolean | null | undefined | EtfPriceHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload, S>

export type EtfPriceHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EtfPriceHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EtfPriceHistoryCountAggregateInputType | true
  }

export interface EtfPriceHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EtfPriceHistory'], meta: { name: 'EtfPriceHistory' } }
  /**
   * Find zero or one EtfPriceHistory that matches the filter.
   * @param {EtfPriceHistoryFindUniqueArgs} args - Arguments to find a EtfPriceHistory
   * @example
   * // Get one EtfPriceHistory
   * const etfPriceHistory = await prisma.etfPriceHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EtfPriceHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, EtfPriceHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EtfPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EtfPriceHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EtfPriceHistoryFindUniqueOrThrowArgs} args - Arguments to find a EtfPriceHistory
   * @example
   * // Get one EtfPriceHistory
   * const etfPriceHistory = await prisma.etfPriceHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EtfPriceHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EtfPriceHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EtfPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EtfPriceHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfPriceHistoryFindFirstArgs} args - Arguments to find a EtfPriceHistory
   * @example
   * // Get one EtfPriceHistory
   * const etfPriceHistory = await prisma.etfPriceHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EtfPriceHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, EtfPriceHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__EtfPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EtfPriceHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfPriceHistoryFindFirstOrThrowArgs} args - Arguments to find a EtfPriceHistory
   * @example
   * // Get one EtfPriceHistory
   * const etfPriceHistory = await prisma.etfPriceHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EtfPriceHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EtfPriceHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EtfPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EtfPriceHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfPriceHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EtfPriceHistories
   * const etfPriceHistories = await prisma.etfPriceHistory.findMany()
   * 
   * // Get first 10 EtfPriceHistories
   * const etfPriceHistories = await prisma.etfPriceHistory.findMany({ take: 10 })
   * 
   * // Only select the `priceIdx`
   * const etfPriceHistoryWithPriceIdxOnly = await prisma.etfPriceHistory.findMany({ select: { priceIdx: true } })
   * 
   */
  findMany<T extends EtfPriceHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, EtfPriceHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EtfPriceHistory.
   * @param {EtfPriceHistoryCreateArgs} args - Arguments to create a EtfPriceHistory.
   * @example
   * // Create one EtfPriceHistory
   * const EtfPriceHistory = await prisma.etfPriceHistory.create({
   *   data: {
   *     // ... data to create a EtfPriceHistory
   *   }
   * })
   * 
   */
  create<T extends EtfPriceHistoryCreateArgs>(args: Prisma.SelectSubset<T, EtfPriceHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__EtfPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EtfPriceHistories.
   * @param {EtfPriceHistoryCreateManyArgs} args - Arguments to create many EtfPriceHistories.
   * @example
   * // Create many EtfPriceHistories
   * const etfPriceHistory = await prisma.etfPriceHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EtfPriceHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, EtfPriceHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a EtfPriceHistory.
   * @param {EtfPriceHistoryDeleteArgs} args - Arguments to delete one EtfPriceHistory.
   * @example
   * // Delete one EtfPriceHistory
   * const EtfPriceHistory = await prisma.etfPriceHistory.delete({
   *   where: {
   *     // ... filter to delete one EtfPriceHistory
   *   }
   * })
   * 
   */
  delete<T extends EtfPriceHistoryDeleteArgs>(args: Prisma.SelectSubset<T, EtfPriceHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__EtfPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EtfPriceHistory.
   * @param {EtfPriceHistoryUpdateArgs} args - Arguments to update one EtfPriceHistory.
   * @example
   * // Update one EtfPriceHistory
   * const etfPriceHistory = await prisma.etfPriceHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EtfPriceHistoryUpdateArgs>(args: Prisma.SelectSubset<T, EtfPriceHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__EtfPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EtfPriceHistories.
   * @param {EtfPriceHistoryDeleteManyArgs} args - Arguments to filter EtfPriceHistories to delete.
   * @example
   * // Delete a few EtfPriceHistories
   * const { count } = await prisma.etfPriceHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EtfPriceHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, EtfPriceHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EtfPriceHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfPriceHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EtfPriceHistories
   * const etfPriceHistory = await prisma.etfPriceHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EtfPriceHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, EtfPriceHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one EtfPriceHistory.
   * @param {EtfPriceHistoryUpsertArgs} args - Arguments to update or create a EtfPriceHistory.
   * @example
   * // Update or create a EtfPriceHistory
   * const etfPriceHistory = await prisma.etfPriceHistory.upsert({
   *   create: {
   *     // ... data to create a EtfPriceHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EtfPriceHistory we want to update
   *   }
   * })
   */
  upsert<T extends EtfPriceHistoryUpsertArgs>(args: Prisma.SelectSubset<T, EtfPriceHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__EtfPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$EtfPriceHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EtfPriceHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfPriceHistoryCountArgs} args - Arguments to filter EtfPriceHistories to count.
   * @example
   * // Count the number of EtfPriceHistories
   * const count = await prisma.etfPriceHistory.count({
   *   where: {
   *     // ... the filter for the EtfPriceHistories we want to count
   *   }
   * })
  **/
  count<T extends EtfPriceHistoryCountArgs>(
    args?: Prisma.Subset<T, EtfPriceHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EtfPriceHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EtfPriceHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfPriceHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EtfPriceHistoryAggregateArgs>(args: Prisma.Subset<T, EtfPriceHistoryAggregateArgs>): Prisma.PrismaPromise<GetEtfPriceHistoryAggregateType<T>>

  /**
   * Group by EtfPriceHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfPriceHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EtfPriceHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EtfPriceHistoryGroupByArgs['orderBy'] }
      : { orderBy?: EtfPriceHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EtfPriceHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEtfPriceHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EtfPriceHistory model
 */
readonly fields: EtfPriceHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EtfPriceHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EtfPriceHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EtfPriceHistory model
 */
export interface EtfPriceHistoryFieldRefs {
  readonly priceIdx: Prisma.FieldRef<"EtfPriceHistory", 'Int'>
  readonly market: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly stockCode: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly open: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly high: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly low: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly price: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly lastDayPrice: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly h52p: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly l52p: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly tXprc: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly tXdif: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly tXrat: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly tRate: Prisma.FieldRef<"EtfPriceHistory", 'String'>
  readonly regDate: Prisma.FieldRef<"EtfPriceHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EtfPriceHistory findUnique
 */
export type EtfPriceHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which EtfPriceHistory to fetch.
   */
  where: Prisma.EtfPriceHistoryWhereUniqueInput
}

/**
 * EtfPriceHistory findUniqueOrThrow
 */
export type EtfPriceHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which EtfPriceHistory to fetch.
   */
  where: Prisma.EtfPriceHistoryWhereUniqueInput
}

/**
 * EtfPriceHistory findFirst
 */
export type EtfPriceHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which EtfPriceHistory to fetch.
   */
  where?: Prisma.EtfPriceHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfPriceHistories to fetch.
   */
  orderBy?: Prisma.EtfPriceHistoryOrderByWithRelationInput | Prisma.EtfPriceHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EtfPriceHistories.
   */
  cursor?: Prisma.EtfPriceHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfPriceHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfPriceHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EtfPriceHistories.
   */
  distinct?: Prisma.EtfPriceHistoryScalarFieldEnum | Prisma.EtfPriceHistoryScalarFieldEnum[]
}

/**
 * EtfPriceHistory findFirstOrThrow
 */
export type EtfPriceHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which EtfPriceHistory to fetch.
   */
  where?: Prisma.EtfPriceHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfPriceHistories to fetch.
   */
  orderBy?: Prisma.EtfPriceHistoryOrderByWithRelationInput | Prisma.EtfPriceHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EtfPriceHistories.
   */
  cursor?: Prisma.EtfPriceHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfPriceHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfPriceHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EtfPriceHistories.
   */
  distinct?: Prisma.EtfPriceHistoryScalarFieldEnum | Prisma.EtfPriceHistoryScalarFieldEnum[]
}

/**
 * EtfPriceHistory findMany
 */
export type EtfPriceHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which EtfPriceHistories to fetch.
   */
  where?: Prisma.EtfPriceHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfPriceHistories to fetch.
   */
  orderBy?: Prisma.EtfPriceHistoryOrderByWithRelationInput | Prisma.EtfPriceHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EtfPriceHistories.
   */
  cursor?: Prisma.EtfPriceHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfPriceHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfPriceHistories.
   */
  skip?: number
  distinct?: Prisma.EtfPriceHistoryScalarFieldEnum | Prisma.EtfPriceHistoryScalarFieldEnum[]
}

/**
 * EtfPriceHistory create
 */
export type EtfPriceHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * The data needed to create a EtfPriceHistory.
   */
  data: Prisma.XOR<Prisma.EtfPriceHistoryCreateInput, Prisma.EtfPriceHistoryUncheckedCreateInput>
}

/**
 * EtfPriceHistory createMany
 */
export type EtfPriceHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EtfPriceHistories.
   */
  data: Prisma.EtfPriceHistoryCreateManyInput | Prisma.EtfPriceHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EtfPriceHistory update
 */
export type EtfPriceHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * The data needed to update a EtfPriceHistory.
   */
  data: Prisma.XOR<Prisma.EtfPriceHistoryUpdateInput, Prisma.EtfPriceHistoryUncheckedUpdateInput>
  /**
   * Choose, which EtfPriceHistory to update.
   */
  where: Prisma.EtfPriceHistoryWhereUniqueInput
}

/**
 * EtfPriceHistory updateMany
 */
export type EtfPriceHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EtfPriceHistories.
   */
  data: Prisma.XOR<Prisma.EtfPriceHistoryUpdateManyMutationInput, Prisma.EtfPriceHistoryUncheckedUpdateManyInput>
  /**
   * Filter which EtfPriceHistories to update
   */
  where?: Prisma.EtfPriceHistoryWhereInput
  /**
   * Limit how many EtfPriceHistories to update.
   */
  limit?: number
}

/**
 * EtfPriceHistory upsert
 */
export type EtfPriceHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * The filter to search for the EtfPriceHistory to update in case it exists.
   */
  where: Prisma.EtfPriceHistoryWhereUniqueInput
  /**
   * In case the EtfPriceHistory found by the `where` argument doesn't exist, create a new EtfPriceHistory with this data.
   */
  create: Prisma.XOR<Prisma.EtfPriceHistoryCreateInput, Prisma.EtfPriceHistoryUncheckedCreateInput>
  /**
   * In case the EtfPriceHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EtfPriceHistoryUpdateInput, Prisma.EtfPriceHistoryUncheckedUpdateInput>
}

/**
 * EtfPriceHistory delete
 */
export type EtfPriceHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter which EtfPriceHistory to delete.
   */
  where: Prisma.EtfPriceHistoryWhereUniqueInput
}

/**
 * EtfPriceHistory deleteMany
 */
export type EtfPriceHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EtfPriceHistories to delete
   */
  where?: Prisma.EtfPriceHistoryWhereInput
  /**
   * Limit how many EtfPriceHistories to delete.
   */
  limit?: number
}

/**
 * EtfPriceHistory without action
 */
export type EtfPriceHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfPriceHistory
   */
  select?: Prisma.EtfPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfPriceHistory
   */
  omit?: Prisma.EtfPriceHistoryOmit<ExtArgs> | null
}
