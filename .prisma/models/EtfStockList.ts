
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `EtfStockList` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EtfStockList
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type EtfStockListModel = runtime.Types.Result.DefaultSelection<Prisma.$EtfStockListPayload>

export type AggregateEtfStockList = {
  _count: EtfStockListCountAggregateOutputType | null
  _avg: EtfStockListAvgAggregateOutputType | null
  _sum: EtfStockListSumAggregateOutputType | null
  _min: EtfStockListMinAggregateOutputType | null
  _max: EtfStockListMaxAggregateOutputType | null
}

export type EtfStockListAvgAggregateOutputType = {
  etfPercent: number | null
}

export type EtfStockListSumAggregateOutputType = {
  etfPercent: number | null
}

export type EtfStockListMinAggregateOutputType = {
  market: string | null
  etfStockCode: string | null
  stockCode: string | null
  checkDate: Date | null
  etfPercent: number | null
}

export type EtfStockListMaxAggregateOutputType = {
  market: string | null
  etfStockCode: string | null
  stockCode: string | null
  checkDate: Date | null
  etfPercent: number | null
}

export type EtfStockListCountAggregateOutputType = {
  market: number
  etfStockCode: number
  stockCode: number
  checkDate: number
  etfPercent: number
  _all: number
}


export type EtfStockListAvgAggregateInputType = {
  etfPercent?: true
}

export type EtfStockListSumAggregateInputType = {
  etfPercent?: true
}

export type EtfStockListMinAggregateInputType = {
  market?: true
  etfStockCode?: true
  stockCode?: true
  checkDate?: true
  etfPercent?: true
}

export type EtfStockListMaxAggregateInputType = {
  market?: true
  etfStockCode?: true
  stockCode?: true
  checkDate?: true
  etfPercent?: true
}

export type EtfStockListCountAggregateInputType = {
  market?: true
  etfStockCode?: true
  stockCode?: true
  checkDate?: true
  etfPercent?: true
  _all?: true
}

export type EtfStockListAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EtfStockList to aggregate.
   */
  where?: Prisma.EtfStockListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfStockLists to fetch.
   */
  orderBy?: Prisma.EtfStockListOrderByWithRelationInput | Prisma.EtfStockListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EtfStockListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfStockLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfStockLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EtfStockLists
  **/
  _count?: true | EtfStockListCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EtfStockListAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EtfStockListSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EtfStockListMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EtfStockListMaxAggregateInputType
}

export type GetEtfStockListAggregateType<T extends EtfStockListAggregateArgs> = {
      [P in keyof T & keyof AggregateEtfStockList]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEtfStockList[P]>
    : Prisma.GetScalarType<T[P], AggregateEtfStockList[P]>
}




export type EtfStockListGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EtfStockListWhereInput
  orderBy?: Prisma.EtfStockListOrderByWithAggregationInput | Prisma.EtfStockListOrderByWithAggregationInput[]
  by: Prisma.EtfStockListScalarFieldEnum[] | Prisma.EtfStockListScalarFieldEnum
  having?: Prisma.EtfStockListScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EtfStockListCountAggregateInputType | true
  _avg?: EtfStockListAvgAggregateInputType
  _sum?: EtfStockListSumAggregateInputType
  _min?: EtfStockListMinAggregateInputType
  _max?: EtfStockListMaxAggregateInputType
}

export type EtfStockListGroupByOutputType = {
  market: string
  etfStockCode: string
  stockCode: string
  checkDate: Date | null
  etfPercent: number | null
  _count: EtfStockListCountAggregateOutputType | null
  _avg: EtfStockListAvgAggregateOutputType | null
  _sum: EtfStockListSumAggregateOutputType | null
  _min: EtfStockListMinAggregateOutputType | null
  _max: EtfStockListMaxAggregateOutputType | null
}

type GetEtfStockListGroupByPayload<T extends EtfStockListGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EtfStockListGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EtfStockListGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EtfStockListGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EtfStockListGroupByOutputType[P]>
      }
    >
  >



export type EtfStockListWhereInput = {
  AND?: Prisma.EtfStockListWhereInput | Prisma.EtfStockListWhereInput[]
  OR?: Prisma.EtfStockListWhereInput[]
  NOT?: Prisma.EtfStockListWhereInput | Prisma.EtfStockListWhereInput[]
  market?: Prisma.StringFilter<"EtfStockList"> | string
  etfStockCode?: Prisma.StringFilter<"EtfStockList"> | string
  stockCode?: Prisma.StringFilter<"EtfStockList"> | string
  checkDate?: Prisma.DateTimeNullableFilter<"EtfStockList"> | Date | string | null
  etfPercent?: Prisma.FloatNullableFilter<"EtfStockList"> | number | null
  etfList?: Prisma.XOR<Prisma.EtfListScalarRelationFilter, Prisma.EtfListWhereInput>
}

export type EtfStockListOrderByWithRelationInput = {
  market?: Prisma.SortOrder
  etfStockCode?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  checkDate?: Prisma.SortOrderInput | Prisma.SortOrder
  etfPercent?: Prisma.SortOrderInput | Prisma.SortOrder
  etfList?: Prisma.EtfListOrderByWithRelationInput
  _relevance?: Prisma.EtfStockListOrderByRelevanceInput
}

export type EtfStockListWhereUniqueInput = Prisma.AtLeast<{
  market_etfStockCode_stockCode?: Prisma.EtfStockListMarketEtfStockCodeStockCodeCompoundUniqueInput
  AND?: Prisma.EtfStockListWhereInput | Prisma.EtfStockListWhereInput[]
  OR?: Prisma.EtfStockListWhereInput[]
  NOT?: Prisma.EtfStockListWhereInput | Prisma.EtfStockListWhereInput[]
  market?: Prisma.StringFilter<"EtfStockList"> | string
  etfStockCode?: Prisma.StringFilter<"EtfStockList"> | string
  stockCode?: Prisma.StringFilter<"EtfStockList"> | string
  checkDate?: Prisma.DateTimeNullableFilter<"EtfStockList"> | Date | string | null
  etfPercent?: Prisma.FloatNullableFilter<"EtfStockList"> | number | null
  etfList?: Prisma.XOR<Prisma.EtfListScalarRelationFilter, Prisma.EtfListWhereInput>
}, "market_etfStockCode_stockCode">

export type EtfStockListOrderByWithAggregationInput = {
  market?: Prisma.SortOrder
  etfStockCode?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  checkDate?: Prisma.SortOrderInput | Prisma.SortOrder
  etfPercent?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.EtfStockListCountOrderByAggregateInput
  _avg?: Prisma.EtfStockListAvgOrderByAggregateInput
  _max?: Prisma.EtfStockListMaxOrderByAggregateInput
  _min?: Prisma.EtfStockListMinOrderByAggregateInput
  _sum?: Prisma.EtfStockListSumOrderByAggregateInput
}

export type EtfStockListScalarWhereWithAggregatesInput = {
  AND?: Prisma.EtfStockListScalarWhereWithAggregatesInput | Prisma.EtfStockListScalarWhereWithAggregatesInput[]
  OR?: Prisma.EtfStockListScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EtfStockListScalarWhereWithAggregatesInput | Prisma.EtfStockListScalarWhereWithAggregatesInput[]
  market?: Prisma.StringWithAggregatesFilter<"EtfStockList"> | string
  etfStockCode?: Prisma.StringWithAggregatesFilter<"EtfStockList"> | string
  stockCode?: Prisma.StringWithAggregatesFilter<"EtfStockList"> | string
  checkDate?: Prisma.DateTimeNullableWithAggregatesFilter<"EtfStockList"> | Date | string | null
  etfPercent?: Prisma.FloatNullableWithAggregatesFilter<"EtfStockList"> | number | null
}

export type EtfStockListCreateInput = {
  stockCode?: string
  checkDate?: Date | string | null
  etfPercent?: number | null
  etfList?: Prisma.EtfListCreateNestedOneWithoutEtfStockListInput
}

export type EtfStockListUncheckedCreateInput = {
  market?: string
  etfStockCode?: string
  stockCode?: string
  checkDate?: Date | string | null
  etfPercent?: number | null
}

export type EtfStockListUpdateInput = {
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  checkDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfPercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  etfList?: Prisma.EtfListUpdateOneRequiredWithoutEtfStockListNestedInput
}

export type EtfStockListUncheckedUpdateInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  etfStockCode?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  checkDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfPercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type EtfStockListCreateManyInput = {
  market?: string
  etfStockCode?: string
  stockCode?: string
  checkDate?: Date | string | null
  etfPercent?: number | null
}

export type EtfStockListUpdateManyMutationInput = {
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  checkDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfPercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type EtfStockListUncheckedUpdateManyInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  etfStockCode?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  checkDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfPercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type EtfStockListListRelationFilter = {
  every?: Prisma.EtfStockListWhereInput
  some?: Prisma.EtfStockListWhereInput
  none?: Prisma.EtfStockListWhereInput
}

export type EtfStockListOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EtfStockListOrderByRelevanceInput = {
  fields: Prisma.EtfStockListOrderByRelevanceFieldEnum | Prisma.EtfStockListOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type EtfStockListMarketEtfStockCodeStockCodeCompoundUniqueInput = {
  market: string
  etfStockCode: string
  stockCode: string
}

export type EtfStockListCountOrderByAggregateInput = {
  market?: Prisma.SortOrder
  etfStockCode?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  checkDate?: Prisma.SortOrder
  etfPercent?: Prisma.SortOrder
}

export type EtfStockListAvgOrderByAggregateInput = {
  etfPercent?: Prisma.SortOrder
}

export type EtfStockListMaxOrderByAggregateInput = {
  market?: Prisma.SortOrder
  etfStockCode?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  checkDate?: Prisma.SortOrder
  etfPercent?: Prisma.SortOrder
}

export type EtfStockListMinOrderByAggregateInput = {
  market?: Prisma.SortOrder
  etfStockCode?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  checkDate?: Prisma.SortOrder
  etfPercent?: Prisma.SortOrder
}

export type EtfStockListSumOrderByAggregateInput = {
  etfPercent?: Prisma.SortOrder
}

export type EtfStockListCreateNestedManyWithoutEtfListInput = {
  create?: Prisma.XOR<Prisma.EtfStockListCreateWithoutEtfListInput, Prisma.EtfStockListUncheckedCreateWithoutEtfListInput> | Prisma.EtfStockListCreateWithoutEtfListInput[] | Prisma.EtfStockListUncheckedCreateWithoutEtfListInput[]
  connectOrCreate?: Prisma.EtfStockListCreateOrConnectWithoutEtfListInput | Prisma.EtfStockListCreateOrConnectWithoutEtfListInput[]
  createMany?: Prisma.EtfStockListCreateManyEtfListInputEnvelope
  connect?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
}

export type EtfStockListUncheckedCreateNestedManyWithoutEtfListInput = {
  create?: Prisma.XOR<Prisma.EtfStockListCreateWithoutEtfListInput, Prisma.EtfStockListUncheckedCreateWithoutEtfListInput> | Prisma.EtfStockListCreateWithoutEtfListInput[] | Prisma.EtfStockListUncheckedCreateWithoutEtfListInput[]
  connectOrCreate?: Prisma.EtfStockListCreateOrConnectWithoutEtfListInput | Prisma.EtfStockListCreateOrConnectWithoutEtfListInput[]
  createMany?: Prisma.EtfStockListCreateManyEtfListInputEnvelope
  connect?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
}

export type EtfStockListUpdateManyWithoutEtfListNestedInput = {
  create?: Prisma.XOR<Prisma.EtfStockListCreateWithoutEtfListInput, Prisma.EtfStockListUncheckedCreateWithoutEtfListInput> | Prisma.EtfStockListCreateWithoutEtfListInput[] | Prisma.EtfStockListUncheckedCreateWithoutEtfListInput[]
  connectOrCreate?: Prisma.EtfStockListCreateOrConnectWithoutEtfListInput | Prisma.EtfStockListCreateOrConnectWithoutEtfListInput[]
  upsert?: Prisma.EtfStockListUpsertWithWhereUniqueWithoutEtfListInput | Prisma.EtfStockListUpsertWithWhereUniqueWithoutEtfListInput[]
  createMany?: Prisma.EtfStockListCreateManyEtfListInputEnvelope
  set?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
  disconnect?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
  delete?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
  connect?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
  update?: Prisma.EtfStockListUpdateWithWhereUniqueWithoutEtfListInput | Prisma.EtfStockListUpdateWithWhereUniqueWithoutEtfListInput[]
  updateMany?: Prisma.EtfStockListUpdateManyWithWhereWithoutEtfListInput | Prisma.EtfStockListUpdateManyWithWhereWithoutEtfListInput[]
  deleteMany?: Prisma.EtfStockListScalarWhereInput | Prisma.EtfStockListScalarWhereInput[]
}

export type EtfStockListUncheckedUpdateManyWithoutEtfListNestedInput = {
  create?: Prisma.XOR<Prisma.EtfStockListCreateWithoutEtfListInput, Prisma.EtfStockListUncheckedCreateWithoutEtfListInput> | Prisma.EtfStockListCreateWithoutEtfListInput[] | Prisma.EtfStockListUncheckedCreateWithoutEtfListInput[]
  connectOrCreate?: Prisma.EtfStockListCreateOrConnectWithoutEtfListInput | Prisma.EtfStockListCreateOrConnectWithoutEtfListInput[]
  upsert?: Prisma.EtfStockListUpsertWithWhereUniqueWithoutEtfListInput | Prisma.EtfStockListUpsertWithWhereUniqueWithoutEtfListInput[]
  createMany?: Prisma.EtfStockListCreateManyEtfListInputEnvelope
  set?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
  disconnect?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
  delete?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
  connect?: Prisma.EtfStockListWhereUniqueInput | Prisma.EtfStockListWhereUniqueInput[]
  update?: Prisma.EtfStockListUpdateWithWhereUniqueWithoutEtfListInput | Prisma.EtfStockListUpdateWithWhereUniqueWithoutEtfListInput[]
  updateMany?: Prisma.EtfStockListUpdateManyWithWhereWithoutEtfListInput | Prisma.EtfStockListUpdateManyWithWhereWithoutEtfListInput[]
  deleteMany?: Prisma.EtfStockListScalarWhereInput | Prisma.EtfStockListScalarWhereInput[]
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EtfStockListCreateWithoutEtfListInput = {
  stockCode?: string
  checkDate?: Date | string | null
  etfPercent?: number | null
}

export type EtfStockListUncheckedCreateWithoutEtfListInput = {
  stockCode?: string
  checkDate?: Date | string | null
  etfPercent?: number | null
}

export type EtfStockListCreateOrConnectWithoutEtfListInput = {
  where: Prisma.EtfStockListWhereUniqueInput
  create: Prisma.XOR<Prisma.EtfStockListCreateWithoutEtfListInput, Prisma.EtfStockListUncheckedCreateWithoutEtfListInput>
}

export type EtfStockListCreateManyEtfListInputEnvelope = {
  data: Prisma.EtfStockListCreateManyEtfListInput | Prisma.EtfStockListCreateManyEtfListInput[]
  skipDuplicates?: boolean
}

export type EtfStockListUpsertWithWhereUniqueWithoutEtfListInput = {
  where: Prisma.EtfStockListWhereUniqueInput
  update: Prisma.XOR<Prisma.EtfStockListUpdateWithoutEtfListInput, Prisma.EtfStockListUncheckedUpdateWithoutEtfListInput>
  create: Prisma.XOR<Prisma.EtfStockListCreateWithoutEtfListInput, Prisma.EtfStockListUncheckedCreateWithoutEtfListInput>
}

export type EtfStockListUpdateWithWhereUniqueWithoutEtfListInput = {
  where: Prisma.EtfStockListWhereUniqueInput
  data: Prisma.XOR<Prisma.EtfStockListUpdateWithoutEtfListInput, Prisma.EtfStockListUncheckedUpdateWithoutEtfListInput>
}

export type EtfStockListUpdateManyWithWhereWithoutEtfListInput = {
  where: Prisma.EtfStockListScalarWhereInput
  data: Prisma.XOR<Prisma.EtfStockListUpdateManyMutationInput, Prisma.EtfStockListUncheckedUpdateManyWithoutEtfListInput>
}

export type EtfStockListScalarWhereInput = {
  AND?: Prisma.EtfStockListScalarWhereInput | Prisma.EtfStockListScalarWhereInput[]
  OR?: Prisma.EtfStockListScalarWhereInput[]
  NOT?: Prisma.EtfStockListScalarWhereInput | Prisma.EtfStockListScalarWhereInput[]
  market?: Prisma.StringFilter<"EtfStockList"> | string
  etfStockCode?: Prisma.StringFilter<"EtfStockList"> | string
  stockCode?: Prisma.StringFilter<"EtfStockList"> | string
  checkDate?: Prisma.DateTimeNullableFilter<"EtfStockList"> | Date | string | null
  etfPercent?: Prisma.FloatNullableFilter<"EtfStockList"> | number | null
}

export type EtfStockListCreateManyEtfListInput = {
  stockCode?: string
  checkDate?: Date | string | null
  etfPercent?: number | null
}

export type EtfStockListUpdateWithoutEtfListInput = {
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  checkDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfPercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type EtfStockListUncheckedUpdateWithoutEtfListInput = {
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  checkDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfPercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type EtfStockListUncheckedUpdateManyWithoutEtfListInput = {
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  checkDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfPercent?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}



export type EtfStockListSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  market?: boolean
  etfStockCode?: boolean
  stockCode?: boolean
  checkDate?: boolean
  etfPercent?: boolean
  etfList?: boolean | Prisma.EtfListDefaultArgs<ExtArgs>
}, ExtArgs["result"]["etfStockList"]>



export type EtfStockListSelectScalar = {
  market?: boolean
  etfStockCode?: boolean
  stockCode?: boolean
  checkDate?: boolean
  etfPercent?: boolean
}

export type EtfStockListOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"market" | "etfStockCode" | "stockCode" | "checkDate" | "etfPercent", ExtArgs["result"]["etfStockList"]>
export type EtfStockListInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  etfList?: boolean | Prisma.EtfListDefaultArgs<ExtArgs>
}

export type $EtfStockListPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EtfStockList"
  objects: {
    etfList: Prisma.$EtfListPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    market: string
    etfStockCode: string
    stockCode: string
    checkDate: Date | null
    etfPercent: number | null
  }, ExtArgs["result"]["etfStockList"]>
  composites: {}
}

export type EtfStockListGetPayload<S extends boolean | null | undefined | EtfStockListDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload, S>

export type EtfStockListCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EtfStockListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EtfStockListCountAggregateInputType | true
  }

export interface EtfStockListDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EtfStockList'], meta: { name: 'EtfStockList' } }
  /**
   * Find zero or one EtfStockList that matches the filter.
   * @param {EtfStockListFindUniqueArgs} args - Arguments to find a EtfStockList
   * @example
   * // Get one EtfStockList
   * const etfStockList = await prisma.etfStockList.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EtfStockListFindUniqueArgs>(args: Prisma.SelectSubset<T, EtfStockListFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EtfStockListClient<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EtfStockList that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EtfStockListFindUniqueOrThrowArgs} args - Arguments to find a EtfStockList
   * @example
   * // Get one EtfStockList
   * const etfStockList = await prisma.etfStockList.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EtfStockListFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EtfStockListFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EtfStockListClient<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EtfStockList that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfStockListFindFirstArgs} args - Arguments to find a EtfStockList
   * @example
   * // Get one EtfStockList
   * const etfStockList = await prisma.etfStockList.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EtfStockListFindFirstArgs>(args?: Prisma.SelectSubset<T, EtfStockListFindFirstArgs<ExtArgs>>): Prisma.Prisma__EtfStockListClient<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EtfStockList that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfStockListFindFirstOrThrowArgs} args - Arguments to find a EtfStockList
   * @example
   * // Get one EtfStockList
   * const etfStockList = await prisma.etfStockList.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EtfStockListFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EtfStockListFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EtfStockListClient<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EtfStockLists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfStockListFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EtfStockLists
   * const etfStockLists = await prisma.etfStockList.findMany()
   * 
   * // Get first 10 EtfStockLists
   * const etfStockLists = await prisma.etfStockList.findMany({ take: 10 })
   * 
   * // Only select the `market`
   * const etfStockListWithMarketOnly = await prisma.etfStockList.findMany({ select: { market: true } })
   * 
   */
  findMany<T extends EtfStockListFindManyArgs>(args?: Prisma.SelectSubset<T, EtfStockListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EtfStockList.
   * @param {EtfStockListCreateArgs} args - Arguments to create a EtfStockList.
   * @example
   * // Create one EtfStockList
   * const EtfStockList = await prisma.etfStockList.create({
   *   data: {
   *     // ... data to create a EtfStockList
   *   }
   * })
   * 
   */
  create<T extends EtfStockListCreateArgs>(args: Prisma.SelectSubset<T, EtfStockListCreateArgs<ExtArgs>>): Prisma.Prisma__EtfStockListClient<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EtfStockLists.
   * @param {EtfStockListCreateManyArgs} args - Arguments to create many EtfStockLists.
   * @example
   * // Create many EtfStockLists
   * const etfStockList = await prisma.etfStockList.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EtfStockListCreateManyArgs>(args?: Prisma.SelectSubset<T, EtfStockListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a EtfStockList.
   * @param {EtfStockListDeleteArgs} args - Arguments to delete one EtfStockList.
   * @example
   * // Delete one EtfStockList
   * const EtfStockList = await prisma.etfStockList.delete({
   *   where: {
   *     // ... filter to delete one EtfStockList
   *   }
   * })
   * 
   */
  delete<T extends EtfStockListDeleteArgs>(args: Prisma.SelectSubset<T, EtfStockListDeleteArgs<ExtArgs>>): Prisma.Prisma__EtfStockListClient<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EtfStockList.
   * @param {EtfStockListUpdateArgs} args - Arguments to update one EtfStockList.
   * @example
   * // Update one EtfStockList
   * const etfStockList = await prisma.etfStockList.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EtfStockListUpdateArgs>(args: Prisma.SelectSubset<T, EtfStockListUpdateArgs<ExtArgs>>): Prisma.Prisma__EtfStockListClient<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EtfStockLists.
   * @param {EtfStockListDeleteManyArgs} args - Arguments to filter EtfStockLists to delete.
   * @example
   * // Delete a few EtfStockLists
   * const { count } = await prisma.etfStockList.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EtfStockListDeleteManyArgs>(args?: Prisma.SelectSubset<T, EtfStockListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EtfStockLists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfStockListUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EtfStockLists
   * const etfStockList = await prisma.etfStockList.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EtfStockListUpdateManyArgs>(args: Prisma.SelectSubset<T, EtfStockListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one EtfStockList.
   * @param {EtfStockListUpsertArgs} args - Arguments to update or create a EtfStockList.
   * @example
   * // Update or create a EtfStockList
   * const etfStockList = await prisma.etfStockList.upsert({
   *   create: {
   *     // ... data to create a EtfStockList
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EtfStockList we want to update
   *   }
   * })
   */
  upsert<T extends EtfStockListUpsertArgs>(args: Prisma.SelectSubset<T, EtfStockListUpsertArgs<ExtArgs>>): Prisma.Prisma__EtfStockListClient<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EtfStockLists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfStockListCountArgs} args - Arguments to filter EtfStockLists to count.
   * @example
   * // Count the number of EtfStockLists
   * const count = await prisma.etfStockList.count({
   *   where: {
   *     // ... the filter for the EtfStockLists we want to count
   *   }
   * })
  **/
  count<T extends EtfStockListCountArgs>(
    args?: Prisma.Subset<T, EtfStockListCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EtfStockListCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EtfStockList.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfStockListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EtfStockListAggregateArgs>(args: Prisma.Subset<T, EtfStockListAggregateArgs>): Prisma.PrismaPromise<GetEtfStockListAggregateType<T>>

  /**
   * Group by EtfStockList.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfStockListGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EtfStockListGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EtfStockListGroupByArgs['orderBy'] }
      : { orderBy?: EtfStockListGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EtfStockListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEtfStockListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EtfStockList model
 */
readonly fields: EtfStockListFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EtfStockList.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EtfStockListClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  etfList<T extends Prisma.EtfListDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EtfListDefaultArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EtfStockList model
 */
export interface EtfStockListFieldRefs {
  readonly market: Prisma.FieldRef<"EtfStockList", 'String'>
  readonly etfStockCode: Prisma.FieldRef<"EtfStockList", 'String'>
  readonly stockCode: Prisma.FieldRef<"EtfStockList", 'String'>
  readonly checkDate: Prisma.FieldRef<"EtfStockList", 'DateTime'>
  readonly etfPercent: Prisma.FieldRef<"EtfStockList", 'Float'>
}
    

// Custom InputTypes
/**
 * EtfStockList findUnique
 */
export type EtfStockListFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * Filter, which EtfStockList to fetch.
   */
  where: Prisma.EtfStockListWhereUniqueInput
}

/**
 * EtfStockList findUniqueOrThrow
 */
export type EtfStockListFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * Filter, which EtfStockList to fetch.
   */
  where: Prisma.EtfStockListWhereUniqueInput
}

/**
 * EtfStockList findFirst
 */
export type EtfStockListFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * Filter, which EtfStockList to fetch.
   */
  where?: Prisma.EtfStockListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfStockLists to fetch.
   */
  orderBy?: Prisma.EtfStockListOrderByWithRelationInput | Prisma.EtfStockListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EtfStockLists.
   */
  cursor?: Prisma.EtfStockListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfStockLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfStockLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EtfStockLists.
   */
  distinct?: Prisma.EtfStockListScalarFieldEnum | Prisma.EtfStockListScalarFieldEnum[]
}

/**
 * EtfStockList findFirstOrThrow
 */
export type EtfStockListFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * Filter, which EtfStockList to fetch.
   */
  where?: Prisma.EtfStockListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfStockLists to fetch.
   */
  orderBy?: Prisma.EtfStockListOrderByWithRelationInput | Prisma.EtfStockListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EtfStockLists.
   */
  cursor?: Prisma.EtfStockListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfStockLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfStockLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EtfStockLists.
   */
  distinct?: Prisma.EtfStockListScalarFieldEnum | Prisma.EtfStockListScalarFieldEnum[]
}

/**
 * EtfStockList findMany
 */
export type EtfStockListFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * Filter, which EtfStockLists to fetch.
   */
  where?: Prisma.EtfStockListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfStockLists to fetch.
   */
  orderBy?: Prisma.EtfStockListOrderByWithRelationInput | Prisma.EtfStockListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EtfStockLists.
   */
  cursor?: Prisma.EtfStockListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfStockLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfStockLists.
   */
  skip?: number
  distinct?: Prisma.EtfStockListScalarFieldEnum | Prisma.EtfStockListScalarFieldEnum[]
}

/**
 * EtfStockList create
 */
export type EtfStockListCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * The data needed to create a EtfStockList.
   */
  data: Prisma.XOR<Prisma.EtfStockListCreateInput, Prisma.EtfStockListUncheckedCreateInput>
}

/**
 * EtfStockList createMany
 */
export type EtfStockListCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EtfStockLists.
   */
  data: Prisma.EtfStockListCreateManyInput | Prisma.EtfStockListCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EtfStockList update
 */
export type EtfStockListUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * The data needed to update a EtfStockList.
   */
  data: Prisma.XOR<Prisma.EtfStockListUpdateInput, Prisma.EtfStockListUncheckedUpdateInput>
  /**
   * Choose, which EtfStockList to update.
   */
  where: Prisma.EtfStockListWhereUniqueInput
}

/**
 * EtfStockList updateMany
 */
export type EtfStockListUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EtfStockLists.
   */
  data: Prisma.XOR<Prisma.EtfStockListUpdateManyMutationInput, Prisma.EtfStockListUncheckedUpdateManyInput>
  /**
   * Filter which EtfStockLists to update
   */
  where?: Prisma.EtfStockListWhereInput
  /**
   * Limit how many EtfStockLists to update.
   */
  limit?: number
}

/**
 * EtfStockList upsert
 */
export type EtfStockListUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * The filter to search for the EtfStockList to update in case it exists.
   */
  where: Prisma.EtfStockListWhereUniqueInput
  /**
   * In case the EtfStockList found by the `where` argument doesn't exist, create a new EtfStockList with this data.
   */
  create: Prisma.XOR<Prisma.EtfStockListCreateInput, Prisma.EtfStockListUncheckedCreateInput>
  /**
   * In case the EtfStockList was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EtfStockListUpdateInput, Prisma.EtfStockListUncheckedUpdateInput>
}

/**
 * EtfStockList delete
 */
export type EtfStockListDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  /**
   * Filter which EtfStockList to delete.
   */
  where: Prisma.EtfStockListWhereUniqueInput
}

/**
 * EtfStockList deleteMany
 */
export type EtfStockListDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EtfStockLists to delete
   */
  where?: Prisma.EtfStockListWhereInput
  /**
   * Limit how many EtfStockLists to delete.
   */
  limit?: number
}

/**
 * EtfStockList without action
 */
export type EtfStockListDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
}
