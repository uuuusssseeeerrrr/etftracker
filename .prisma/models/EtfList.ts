
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `EtfList` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EtfList
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type EtfListModel = runtime.Types.Result.DefaultSelection<Prisma.$EtfListPayload>

export type AggregateEtfList = {
  _count: EtfListCountAggregateOutputType | null
  _min: EtfListMinAggregateOutputType | null
  _max: EtfListMaxAggregateOutputType | null
}

export type EtfListMinAggregateOutputType = {
  market: string | null
  stockCode: string | null
  etfName: string | null
  companyName: string | null
  benchmarkIndex: string | null
  indexComment: string | null
  tradingLot: string | null
  trustFeeRate: string | null
  stdPdno: string | null
  isin_code: string | null
  regDate: Date | null
  modDate: Date | null
}

export type EtfListMaxAggregateOutputType = {
  market: string | null
  stockCode: string | null
  etfName: string | null
  companyName: string | null
  benchmarkIndex: string | null
  indexComment: string | null
  tradingLot: string | null
  trustFeeRate: string | null
  stdPdno: string | null
  isin_code: string | null
  regDate: Date | null
  modDate: Date | null
}

export type EtfListCountAggregateOutputType = {
  market: number
  stockCode: number
  etfName: number
  companyName: number
  benchmarkIndex: number
  indexComment: number
  tradingLot: number
  trustFeeRate: number
  stdPdno: number
  isin_code: number
  regDate: number
  modDate: number
  _all: number
}


export type EtfListMinAggregateInputType = {
  market?: true
  stockCode?: true
  etfName?: true
  companyName?: true
  benchmarkIndex?: true
  indexComment?: true
  tradingLot?: true
  trustFeeRate?: true
  stdPdno?: true
  isin_code?: true
  regDate?: true
  modDate?: true
}

export type EtfListMaxAggregateInputType = {
  market?: true
  stockCode?: true
  etfName?: true
  companyName?: true
  benchmarkIndex?: true
  indexComment?: true
  tradingLot?: true
  trustFeeRate?: true
  stdPdno?: true
  isin_code?: true
  regDate?: true
  modDate?: true
}

export type EtfListCountAggregateInputType = {
  market?: true
  stockCode?: true
  etfName?: true
  companyName?: true
  benchmarkIndex?: true
  indexComment?: true
  tradingLot?: true
  trustFeeRate?: true
  stdPdno?: true
  isin_code?: true
  regDate?: true
  modDate?: true
  _all?: true
}

export type EtfListAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EtfList to aggregate.
   */
  where?: Prisma.EtfListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfLists to fetch.
   */
  orderBy?: Prisma.EtfListOrderByWithRelationInput | Prisma.EtfListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EtfListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EtfLists
  **/
  _count?: true | EtfListCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EtfListMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EtfListMaxAggregateInputType
}

export type GetEtfListAggregateType<T extends EtfListAggregateArgs> = {
      [P in keyof T & keyof AggregateEtfList]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEtfList[P]>
    : Prisma.GetScalarType<T[P], AggregateEtfList[P]>
}




export type EtfListGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EtfListWhereInput
  orderBy?: Prisma.EtfListOrderByWithAggregationInput | Prisma.EtfListOrderByWithAggregationInput[]
  by: Prisma.EtfListScalarFieldEnum[] | Prisma.EtfListScalarFieldEnum
  having?: Prisma.EtfListScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EtfListCountAggregateInputType | true
  _min?: EtfListMinAggregateInputType
  _max?: EtfListMaxAggregateInputType
}

export type EtfListGroupByOutputType = {
  market: string
  stockCode: string
  etfName: string | null
  companyName: string | null
  benchmarkIndex: string | null
  indexComment: string | null
  tradingLot: string | null
  trustFeeRate: string | null
  stdPdno: string | null
  isin_code: string | null
  regDate: Date | null
  modDate: Date | null
  _count: EtfListCountAggregateOutputType | null
  _min: EtfListMinAggregateOutputType | null
  _max: EtfListMaxAggregateOutputType | null
}

type GetEtfListGroupByPayload<T extends EtfListGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EtfListGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EtfListGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EtfListGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EtfListGroupByOutputType[P]>
      }
    >
  >



export type EtfListWhereInput = {
  AND?: Prisma.EtfListWhereInput | Prisma.EtfListWhereInput[]
  OR?: Prisma.EtfListWhereInput[]
  NOT?: Prisma.EtfListWhereInput | Prisma.EtfListWhereInput[]
  market?: Prisma.StringFilter<"EtfList"> | string
  stockCode?: Prisma.StringFilter<"EtfList"> | string
  etfName?: Prisma.StringNullableFilter<"EtfList"> | string | null
  companyName?: Prisma.StringNullableFilter<"EtfList"> | string | null
  benchmarkIndex?: Prisma.StringNullableFilter<"EtfList"> | string | null
  indexComment?: Prisma.StringNullableFilter<"EtfList"> | string | null
  tradingLot?: Prisma.StringNullableFilter<"EtfList"> | string | null
  trustFeeRate?: Prisma.StringNullableFilter<"EtfList"> | string | null
  stdPdno?: Prisma.StringNullableFilter<"EtfList"> | string | null
  isin_code?: Prisma.StringNullableFilter<"EtfList"> | string | null
  regDate?: Prisma.DateTimeNullableFilter<"EtfList"> | Date | string | null
  modDate?: Prisma.DateTimeNullableFilter<"EtfList"> | Date | string | null
  etfStockList?: Prisma.EtfStockListListRelationFilter
}

export type EtfListOrderByWithRelationInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  etfName?: Prisma.SortOrderInput | Prisma.SortOrder
  companyName?: Prisma.SortOrderInput | Prisma.SortOrder
  benchmarkIndex?: Prisma.SortOrderInput | Prisma.SortOrder
  indexComment?: Prisma.SortOrderInput | Prisma.SortOrder
  tradingLot?: Prisma.SortOrderInput | Prisma.SortOrder
  trustFeeRate?: Prisma.SortOrderInput | Prisma.SortOrder
  stdPdno?: Prisma.SortOrderInput | Prisma.SortOrder
  isin_code?: Prisma.SortOrderInput | Prisma.SortOrder
  regDate?: Prisma.SortOrderInput | Prisma.SortOrder
  modDate?: Prisma.SortOrderInput | Prisma.SortOrder
  etfStockList?: Prisma.EtfStockListOrderByRelationAggregateInput
  _relevance?: Prisma.EtfListOrderByRelevanceInput
}

export type EtfListWhereUniqueInput = Prisma.AtLeast<{
  market_stockCode?: Prisma.EtfListMarketStockCodeCompoundUniqueInput
  AND?: Prisma.EtfListWhereInput | Prisma.EtfListWhereInput[]
  OR?: Prisma.EtfListWhereInput[]
  NOT?: Prisma.EtfListWhereInput | Prisma.EtfListWhereInput[]
  market?: Prisma.StringFilter<"EtfList"> | string
  stockCode?: Prisma.StringFilter<"EtfList"> | string
  etfName?: Prisma.StringNullableFilter<"EtfList"> | string | null
  companyName?: Prisma.StringNullableFilter<"EtfList"> | string | null
  benchmarkIndex?: Prisma.StringNullableFilter<"EtfList"> | string | null
  indexComment?: Prisma.StringNullableFilter<"EtfList"> | string | null
  tradingLot?: Prisma.StringNullableFilter<"EtfList"> | string | null
  trustFeeRate?: Prisma.StringNullableFilter<"EtfList"> | string | null
  stdPdno?: Prisma.StringNullableFilter<"EtfList"> | string | null
  isin_code?: Prisma.StringNullableFilter<"EtfList"> | string | null
  regDate?: Prisma.DateTimeNullableFilter<"EtfList"> | Date | string | null
  modDate?: Prisma.DateTimeNullableFilter<"EtfList"> | Date | string | null
  etfStockList?: Prisma.EtfStockListListRelationFilter
}, "market_stockCode">

export type EtfListOrderByWithAggregationInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  etfName?: Prisma.SortOrderInput | Prisma.SortOrder
  companyName?: Prisma.SortOrderInput | Prisma.SortOrder
  benchmarkIndex?: Prisma.SortOrderInput | Prisma.SortOrder
  indexComment?: Prisma.SortOrderInput | Prisma.SortOrder
  tradingLot?: Prisma.SortOrderInput | Prisma.SortOrder
  trustFeeRate?: Prisma.SortOrderInput | Prisma.SortOrder
  stdPdno?: Prisma.SortOrderInput | Prisma.SortOrder
  isin_code?: Prisma.SortOrderInput | Prisma.SortOrder
  regDate?: Prisma.SortOrderInput | Prisma.SortOrder
  modDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.EtfListCountOrderByAggregateInput
  _max?: Prisma.EtfListMaxOrderByAggregateInput
  _min?: Prisma.EtfListMinOrderByAggregateInput
}

export type EtfListScalarWhereWithAggregatesInput = {
  AND?: Prisma.EtfListScalarWhereWithAggregatesInput | Prisma.EtfListScalarWhereWithAggregatesInput[]
  OR?: Prisma.EtfListScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EtfListScalarWhereWithAggregatesInput | Prisma.EtfListScalarWhereWithAggregatesInput[]
  market?: Prisma.StringWithAggregatesFilter<"EtfList"> | string
  stockCode?: Prisma.StringWithAggregatesFilter<"EtfList"> | string
  etfName?: Prisma.StringNullableWithAggregatesFilter<"EtfList"> | string | null
  companyName?: Prisma.StringNullableWithAggregatesFilter<"EtfList"> | string | null
  benchmarkIndex?: Prisma.StringNullableWithAggregatesFilter<"EtfList"> | string | null
  indexComment?: Prisma.StringNullableWithAggregatesFilter<"EtfList"> | string | null
  tradingLot?: Prisma.StringNullableWithAggregatesFilter<"EtfList"> | string | null
  trustFeeRate?: Prisma.StringNullableWithAggregatesFilter<"EtfList"> | string | null
  stdPdno?: Prisma.StringNullableWithAggregatesFilter<"EtfList"> | string | null
  isin_code?: Prisma.StringNullableWithAggregatesFilter<"EtfList"> | string | null
  regDate?: Prisma.DateTimeNullableWithAggregatesFilter<"EtfList"> | Date | string | null
  modDate?: Prisma.DateTimeNullableWithAggregatesFilter<"EtfList"> | Date | string | null
}

export type EtfListCreateInput = {
  market?: string
  stockCode?: string
  etfName?: string | null
  companyName?: string | null
  benchmarkIndex?: string | null
  indexComment?: string | null
  tradingLot?: string | null
  trustFeeRate?: string | null
  stdPdno?: string | null
  isin_code?: string | null
  regDate?: Date | string | null
  modDate?: Date | string | null
  etfStockList?: Prisma.EtfStockListCreateNestedManyWithoutEtfListInput
}

export type EtfListUncheckedCreateInput = {
  market?: string
  stockCode?: string
  etfName?: string | null
  companyName?: string | null
  benchmarkIndex?: string | null
  indexComment?: string | null
  tradingLot?: string | null
  trustFeeRate?: string | null
  stdPdno?: string | null
  isin_code?: string | null
  regDate?: Date | string | null
  modDate?: Date | string | null
  etfStockList?: Prisma.EtfStockListUncheckedCreateNestedManyWithoutEtfListInput
}

export type EtfListUpdateInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  etfName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  benchmarkIndex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tradingLot?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trustFeeRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfStockList?: Prisma.EtfStockListUpdateManyWithoutEtfListNestedInput
}

export type EtfListUncheckedUpdateInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  etfName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  benchmarkIndex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tradingLot?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trustFeeRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  etfStockList?: Prisma.EtfStockListUncheckedUpdateManyWithoutEtfListNestedInput
}

export type EtfListCreateManyInput = {
  market?: string
  stockCode?: string
  etfName?: string | null
  companyName?: string | null
  benchmarkIndex?: string | null
  indexComment?: string | null
  tradingLot?: string | null
  trustFeeRate?: string | null
  stdPdno?: string | null
  isin_code?: string | null
  regDate?: Date | string | null
  modDate?: Date | string | null
}

export type EtfListUpdateManyMutationInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  etfName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  benchmarkIndex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tradingLot?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trustFeeRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type EtfListUncheckedUpdateManyInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  etfName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  benchmarkIndex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tradingLot?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trustFeeRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type EtfListOrderByRelevanceInput = {
  fields: Prisma.EtfListOrderByRelevanceFieldEnum | Prisma.EtfListOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type EtfListMarketStockCodeCompoundUniqueInput = {
  market: string
  stockCode: string
}

export type EtfListCountOrderByAggregateInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  etfName?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  benchmarkIndex?: Prisma.SortOrder
  indexComment?: Prisma.SortOrder
  tradingLot?: Prisma.SortOrder
  trustFeeRate?: Prisma.SortOrder
  stdPdno?: Prisma.SortOrder
  isin_code?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
  modDate?: Prisma.SortOrder
}

export type EtfListMaxOrderByAggregateInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  etfName?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  benchmarkIndex?: Prisma.SortOrder
  indexComment?: Prisma.SortOrder
  tradingLot?: Prisma.SortOrder
  trustFeeRate?: Prisma.SortOrder
  stdPdno?: Prisma.SortOrder
  isin_code?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
  modDate?: Prisma.SortOrder
}

export type EtfListMinOrderByAggregateInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  etfName?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  benchmarkIndex?: Prisma.SortOrder
  indexComment?: Prisma.SortOrder
  tradingLot?: Prisma.SortOrder
  trustFeeRate?: Prisma.SortOrder
  stdPdno?: Prisma.SortOrder
  isin_code?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
  modDate?: Prisma.SortOrder
}

export type EtfListScalarRelationFilter = {
  is?: Prisma.EtfListWhereInput
  isNot?: Prisma.EtfListWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type EtfListCreateNestedOneWithoutEtfStockListInput = {
  create?: Prisma.XOR<Prisma.EtfListCreateWithoutEtfStockListInput, Prisma.EtfListUncheckedCreateWithoutEtfStockListInput>
  connectOrCreate?: Prisma.EtfListCreateOrConnectWithoutEtfStockListInput
  connect?: Prisma.EtfListWhereUniqueInput
}

export type EtfListUpdateOneRequiredWithoutEtfStockListNestedInput = {
  create?: Prisma.XOR<Prisma.EtfListCreateWithoutEtfStockListInput, Prisma.EtfListUncheckedCreateWithoutEtfStockListInput>
  connectOrCreate?: Prisma.EtfListCreateOrConnectWithoutEtfStockListInput
  upsert?: Prisma.EtfListUpsertWithoutEtfStockListInput
  connect?: Prisma.EtfListWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EtfListUpdateToOneWithWhereWithoutEtfStockListInput, Prisma.EtfListUpdateWithoutEtfStockListInput>, Prisma.EtfListUncheckedUpdateWithoutEtfStockListInput>
}

export type EtfListCreateWithoutEtfStockListInput = {
  market?: string
  stockCode?: string
  etfName?: string | null
  companyName?: string | null
  benchmarkIndex?: string | null
  indexComment?: string | null
  tradingLot?: string | null
  trustFeeRate?: string | null
  stdPdno?: string | null
  isin_code?: string | null
  regDate?: Date | string | null
  modDate?: Date | string | null
}

export type EtfListUncheckedCreateWithoutEtfStockListInput = {
  market?: string
  stockCode?: string
  etfName?: string | null
  companyName?: string | null
  benchmarkIndex?: string | null
  indexComment?: string | null
  tradingLot?: string | null
  trustFeeRate?: string | null
  stdPdno?: string | null
  isin_code?: string | null
  regDate?: Date | string | null
  modDate?: Date | string | null
}

export type EtfListCreateOrConnectWithoutEtfStockListInput = {
  where: Prisma.EtfListWhereUniqueInput
  create: Prisma.XOR<Prisma.EtfListCreateWithoutEtfStockListInput, Prisma.EtfListUncheckedCreateWithoutEtfStockListInput>
}

export type EtfListUpsertWithoutEtfStockListInput = {
  update: Prisma.XOR<Prisma.EtfListUpdateWithoutEtfStockListInput, Prisma.EtfListUncheckedUpdateWithoutEtfStockListInput>
  create: Prisma.XOR<Prisma.EtfListCreateWithoutEtfStockListInput, Prisma.EtfListUncheckedCreateWithoutEtfStockListInput>
  where?: Prisma.EtfListWhereInput
}

export type EtfListUpdateToOneWithWhereWithoutEtfStockListInput = {
  where?: Prisma.EtfListWhereInput
  data: Prisma.XOR<Prisma.EtfListUpdateWithoutEtfStockListInput, Prisma.EtfListUncheckedUpdateWithoutEtfStockListInput>
}

export type EtfListUpdateWithoutEtfStockListInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  etfName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  benchmarkIndex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tradingLot?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trustFeeRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type EtfListUncheckedUpdateWithoutEtfStockListInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  etfName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  benchmarkIndex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tradingLot?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trustFeeRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type EtfListCountOutputType
 */

export type EtfListCountOutputType = {
  etfStockList: number
}

export type EtfListCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  etfStockList?: boolean | EtfListCountOutputTypeCountEtfStockListArgs
}

/**
 * EtfListCountOutputType without action
 */
export type EtfListCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfListCountOutputType
   */
  select?: Prisma.EtfListCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EtfListCountOutputType without action
 */
export type EtfListCountOutputTypeCountEtfStockListArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EtfStockListWhereInput
}


export type EtfListSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  market?: boolean
  stockCode?: boolean
  etfName?: boolean
  companyName?: boolean
  benchmarkIndex?: boolean
  indexComment?: boolean
  tradingLot?: boolean
  trustFeeRate?: boolean
  stdPdno?: boolean
  isin_code?: boolean
  regDate?: boolean
  modDate?: boolean
  etfStockList?: boolean | Prisma.EtfList$etfStockListArgs<ExtArgs>
  _count?: boolean | Prisma.EtfListCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["etfList"]>



export type EtfListSelectScalar = {
  market?: boolean
  stockCode?: boolean
  etfName?: boolean
  companyName?: boolean
  benchmarkIndex?: boolean
  indexComment?: boolean
  tradingLot?: boolean
  trustFeeRate?: boolean
  stdPdno?: boolean
  isin_code?: boolean
  regDate?: boolean
  modDate?: boolean
}

export type EtfListOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"market" | "stockCode" | "etfName" | "companyName" | "benchmarkIndex" | "indexComment" | "tradingLot" | "trustFeeRate" | "stdPdno" | "isin_code" | "regDate" | "modDate", ExtArgs["result"]["etfList"]>
export type EtfListInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  etfStockList?: boolean | Prisma.EtfList$etfStockListArgs<ExtArgs>
  _count?: boolean | Prisma.EtfListCountOutputTypeDefaultArgs<ExtArgs>
}

export type $EtfListPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EtfList"
  objects: {
    etfStockList: Prisma.$EtfStockListPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    market: string
    stockCode: string
    etfName: string | null
    companyName: string | null
    benchmarkIndex: string | null
    indexComment: string | null
    tradingLot: string | null
    trustFeeRate: string | null
    stdPdno: string | null
    isin_code: string | null
    regDate: Date | null
    modDate: Date | null
  }, ExtArgs["result"]["etfList"]>
  composites: {}
}

export type EtfListGetPayload<S extends boolean | null | undefined | EtfListDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EtfListPayload, S>

export type EtfListCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EtfListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EtfListCountAggregateInputType | true
  }

export interface EtfListDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EtfList'], meta: { name: 'EtfList' } }
  /**
   * Find zero or one EtfList that matches the filter.
   * @param {EtfListFindUniqueArgs} args - Arguments to find a EtfList
   * @example
   * // Get one EtfList
   * const etfList = await prisma.etfList.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EtfListFindUniqueArgs>(args: Prisma.SelectSubset<T, EtfListFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EtfList that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EtfListFindUniqueOrThrowArgs} args - Arguments to find a EtfList
   * @example
   * // Get one EtfList
   * const etfList = await prisma.etfList.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EtfListFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EtfListFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EtfList that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfListFindFirstArgs} args - Arguments to find a EtfList
   * @example
   * // Get one EtfList
   * const etfList = await prisma.etfList.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EtfListFindFirstArgs>(args?: Prisma.SelectSubset<T, EtfListFindFirstArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EtfList that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfListFindFirstOrThrowArgs} args - Arguments to find a EtfList
   * @example
   * // Get one EtfList
   * const etfList = await prisma.etfList.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EtfListFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EtfListFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EtfLists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfListFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EtfLists
   * const etfLists = await prisma.etfList.findMany()
   * 
   * // Get first 10 EtfLists
   * const etfLists = await prisma.etfList.findMany({ take: 10 })
   * 
   * // Only select the `market`
   * const etfListWithMarketOnly = await prisma.etfList.findMany({ select: { market: true } })
   * 
   */
  findMany<T extends EtfListFindManyArgs>(args?: Prisma.SelectSubset<T, EtfListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EtfList.
   * @param {EtfListCreateArgs} args - Arguments to create a EtfList.
   * @example
   * // Create one EtfList
   * const EtfList = await prisma.etfList.create({
   *   data: {
   *     // ... data to create a EtfList
   *   }
   * })
   * 
   */
  create<T extends EtfListCreateArgs>(args: Prisma.SelectSubset<T, EtfListCreateArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EtfLists.
   * @param {EtfListCreateManyArgs} args - Arguments to create many EtfLists.
   * @example
   * // Create many EtfLists
   * const etfList = await prisma.etfList.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EtfListCreateManyArgs>(args?: Prisma.SelectSubset<T, EtfListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a EtfList.
   * @param {EtfListDeleteArgs} args - Arguments to delete one EtfList.
   * @example
   * // Delete one EtfList
   * const EtfList = await prisma.etfList.delete({
   *   where: {
   *     // ... filter to delete one EtfList
   *   }
   * })
   * 
   */
  delete<T extends EtfListDeleteArgs>(args: Prisma.SelectSubset<T, EtfListDeleteArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EtfList.
   * @param {EtfListUpdateArgs} args - Arguments to update one EtfList.
   * @example
   * // Update one EtfList
   * const etfList = await prisma.etfList.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EtfListUpdateArgs>(args: Prisma.SelectSubset<T, EtfListUpdateArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EtfLists.
   * @param {EtfListDeleteManyArgs} args - Arguments to filter EtfLists to delete.
   * @example
   * // Delete a few EtfLists
   * const { count } = await prisma.etfList.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EtfListDeleteManyArgs>(args?: Prisma.SelectSubset<T, EtfListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EtfLists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfListUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EtfLists
   * const etfList = await prisma.etfList.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EtfListUpdateManyArgs>(args: Prisma.SelectSubset<T, EtfListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one EtfList.
   * @param {EtfListUpsertArgs} args - Arguments to update or create a EtfList.
   * @example
   * // Update or create a EtfList
   * const etfList = await prisma.etfList.upsert({
   *   create: {
   *     // ... data to create a EtfList
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EtfList we want to update
   *   }
   * })
   */
  upsert<T extends EtfListUpsertArgs>(args: Prisma.SelectSubset<T, EtfListUpsertArgs<ExtArgs>>): Prisma.Prisma__EtfListClient<runtime.Types.Result.GetResult<Prisma.$EtfListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EtfLists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfListCountArgs} args - Arguments to filter EtfLists to count.
   * @example
   * // Count the number of EtfLists
   * const count = await prisma.etfList.count({
   *   where: {
   *     // ... the filter for the EtfLists we want to count
   *   }
   * })
  **/
  count<T extends EtfListCountArgs>(
    args?: Prisma.Subset<T, EtfListCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EtfListCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EtfList.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EtfListAggregateArgs>(args: Prisma.Subset<T, EtfListAggregateArgs>): Prisma.PrismaPromise<GetEtfListAggregateType<T>>

  /**
   * Group by EtfList.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EtfListGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EtfListGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EtfListGroupByArgs['orderBy'] }
      : { orderBy?: EtfListGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EtfListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEtfListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EtfList model
 */
readonly fields: EtfListFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EtfList.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EtfListClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  etfStockList<T extends Prisma.EtfList$etfStockListArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EtfList$etfStockListArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EtfStockListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EtfList model
 */
export interface EtfListFieldRefs {
  readonly market: Prisma.FieldRef<"EtfList", 'String'>
  readonly stockCode: Prisma.FieldRef<"EtfList", 'String'>
  readonly etfName: Prisma.FieldRef<"EtfList", 'String'>
  readonly companyName: Prisma.FieldRef<"EtfList", 'String'>
  readonly benchmarkIndex: Prisma.FieldRef<"EtfList", 'String'>
  readonly indexComment: Prisma.FieldRef<"EtfList", 'String'>
  readonly tradingLot: Prisma.FieldRef<"EtfList", 'String'>
  readonly trustFeeRate: Prisma.FieldRef<"EtfList", 'String'>
  readonly stdPdno: Prisma.FieldRef<"EtfList", 'String'>
  readonly isin_code: Prisma.FieldRef<"EtfList", 'String'>
  readonly regDate: Prisma.FieldRef<"EtfList", 'DateTime'>
  readonly modDate: Prisma.FieldRef<"EtfList", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EtfList findUnique
 */
export type EtfListFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * Filter, which EtfList to fetch.
   */
  where: Prisma.EtfListWhereUniqueInput
}

/**
 * EtfList findUniqueOrThrow
 */
export type EtfListFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * Filter, which EtfList to fetch.
   */
  where: Prisma.EtfListWhereUniqueInput
}

/**
 * EtfList findFirst
 */
export type EtfListFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * Filter, which EtfList to fetch.
   */
  where?: Prisma.EtfListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfLists to fetch.
   */
  orderBy?: Prisma.EtfListOrderByWithRelationInput | Prisma.EtfListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EtfLists.
   */
  cursor?: Prisma.EtfListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EtfLists.
   */
  distinct?: Prisma.EtfListScalarFieldEnum | Prisma.EtfListScalarFieldEnum[]
}

/**
 * EtfList findFirstOrThrow
 */
export type EtfListFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * Filter, which EtfList to fetch.
   */
  where?: Prisma.EtfListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfLists to fetch.
   */
  orderBy?: Prisma.EtfListOrderByWithRelationInput | Prisma.EtfListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EtfLists.
   */
  cursor?: Prisma.EtfListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EtfLists.
   */
  distinct?: Prisma.EtfListScalarFieldEnum | Prisma.EtfListScalarFieldEnum[]
}

/**
 * EtfList findMany
 */
export type EtfListFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * Filter, which EtfLists to fetch.
   */
  where?: Prisma.EtfListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EtfLists to fetch.
   */
  orderBy?: Prisma.EtfListOrderByWithRelationInput | Prisma.EtfListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EtfLists.
   */
  cursor?: Prisma.EtfListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EtfLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EtfLists.
   */
  skip?: number
  distinct?: Prisma.EtfListScalarFieldEnum | Prisma.EtfListScalarFieldEnum[]
}

/**
 * EtfList create
 */
export type EtfListCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * The data needed to create a EtfList.
   */
  data?: Prisma.XOR<Prisma.EtfListCreateInput, Prisma.EtfListUncheckedCreateInput>
}

/**
 * EtfList createMany
 */
export type EtfListCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EtfLists.
   */
  data: Prisma.EtfListCreateManyInput | Prisma.EtfListCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EtfList update
 */
export type EtfListUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * The data needed to update a EtfList.
   */
  data: Prisma.XOR<Prisma.EtfListUpdateInput, Prisma.EtfListUncheckedUpdateInput>
  /**
   * Choose, which EtfList to update.
   */
  where: Prisma.EtfListWhereUniqueInput
}

/**
 * EtfList updateMany
 */
export type EtfListUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EtfLists.
   */
  data: Prisma.XOR<Prisma.EtfListUpdateManyMutationInput, Prisma.EtfListUncheckedUpdateManyInput>
  /**
   * Filter which EtfLists to update
   */
  where?: Prisma.EtfListWhereInput
  /**
   * Limit how many EtfLists to update.
   */
  limit?: number
}

/**
 * EtfList upsert
 */
export type EtfListUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * The filter to search for the EtfList to update in case it exists.
   */
  where: Prisma.EtfListWhereUniqueInput
  /**
   * In case the EtfList found by the `where` argument doesn't exist, create a new EtfList with this data.
   */
  create: Prisma.XOR<Prisma.EtfListCreateInput, Prisma.EtfListUncheckedCreateInput>
  /**
   * In case the EtfList was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EtfListUpdateInput, Prisma.EtfListUncheckedUpdateInput>
}

/**
 * EtfList delete
 */
export type EtfListDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
  /**
   * Filter which EtfList to delete.
   */
  where: Prisma.EtfListWhereUniqueInput
}

/**
 * EtfList deleteMany
 */
export type EtfListDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EtfLists to delete
   */
  where?: Prisma.EtfListWhereInput
  /**
   * Limit how many EtfLists to delete.
   */
  limit?: number
}

/**
 * EtfList.etfStockList
 */
export type EtfList$etfStockListArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfStockList
   */
  select?: Prisma.EtfStockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfStockList
   */
  omit?: Prisma.EtfStockListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfStockListInclude<ExtArgs> | null
  where?: Prisma.EtfStockListWhereInput
  orderBy?: Prisma.EtfStockListOrderByWithRelationInput | Prisma.EtfStockListOrderByWithRelationInput[]
  cursor?: Prisma.EtfStockListWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EtfStockListScalarFieldEnum | Prisma.EtfStockListScalarFieldEnum[]
}

/**
 * EtfList without action
 */
export type EtfListDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EtfList
   */
  select?: Prisma.EtfListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EtfList
   */
  omit?: Prisma.EtfListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EtfListInclude<ExtArgs> | null
}
