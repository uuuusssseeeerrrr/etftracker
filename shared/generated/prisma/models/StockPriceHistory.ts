
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StockPriceHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StockPriceHistory
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type StockPriceHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$StockPriceHistoryPayload>

export type AggregateStockPriceHistory = {
  _count: StockPriceHistoryCountAggregateOutputType | null
  _avg: StockPriceHistoryAvgAggregateOutputType | null
  _sum: StockPriceHistorySumAggregateOutputType | null
  _min: StockPriceHistoryMinAggregateOutputType | null
  _max: StockPriceHistoryMaxAggregateOutputType | null
}

export type StockPriceHistoryAvgAggregateOutputType = {
  priceIdx: number | null
}

export type StockPriceHistorySumAggregateOutputType = {
  priceIdx: number | null
}

export type StockPriceHistoryMinAggregateOutputType = {
  priceIdx: number | null
  market: string | null
  stockCode: string | null
  open: string | null
  high: string | null
  low: string | null
  price: string | null
  lastDayPrice: string | null
  tomv: string | null
  h52p: string | null
  l52p: string | null
  perx: string | null
  pbrx: string | null
  epsx: string | null
  bpsx: string | null
  tXprc: string | null
  tXdif: string | null
  tXrat: string | null
  tRate: string | null
  eIcod: string | null
  regDate: Date | null
}

export type StockPriceHistoryMaxAggregateOutputType = {
  priceIdx: number | null
  market: string | null
  stockCode: string | null
  open: string | null
  high: string | null
  low: string | null
  price: string | null
  lastDayPrice: string | null
  tomv: string | null
  h52p: string | null
  l52p: string | null
  perx: string | null
  pbrx: string | null
  epsx: string | null
  bpsx: string | null
  tXprc: string | null
  tXdif: string | null
  tXrat: string | null
  tRate: string | null
  eIcod: string | null
  regDate: Date | null
}

export type StockPriceHistoryCountAggregateOutputType = {
  priceIdx: number
  market: number
  stockCode: number
  open: number
  high: number
  low: number
  price: number
  lastDayPrice: number
  tomv: number
  h52p: number
  l52p: number
  perx: number
  pbrx: number
  epsx: number
  bpsx: number
  tXprc: number
  tXdif: number
  tXrat: number
  tRate: number
  eIcod: number
  regDate: number
  _all: number
}


export type StockPriceHistoryAvgAggregateInputType = {
  priceIdx?: true
}

export type StockPriceHistorySumAggregateInputType = {
  priceIdx?: true
}

export type StockPriceHistoryMinAggregateInputType = {
  priceIdx?: true
  market?: true
  stockCode?: true
  open?: true
  high?: true
  low?: true
  price?: true
  lastDayPrice?: true
  tomv?: true
  h52p?: true
  l52p?: true
  perx?: true
  pbrx?: true
  epsx?: true
  bpsx?: true
  tXprc?: true
  tXdif?: true
  tXrat?: true
  tRate?: true
  eIcod?: true
  regDate?: true
}

export type StockPriceHistoryMaxAggregateInputType = {
  priceIdx?: true
  market?: true
  stockCode?: true
  open?: true
  high?: true
  low?: true
  price?: true
  lastDayPrice?: true
  tomv?: true
  h52p?: true
  l52p?: true
  perx?: true
  pbrx?: true
  epsx?: true
  bpsx?: true
  tXprc?: true
  tXdif?: true
  tXrat?: true
  tRate?: true
  eIcod?: true
  regDate?: true
}

export type StockPriceHistoryCountAggregateInputType = {
  priceIdx?: true
  market?: true
  stockCode?: true
  open?: true
  high?: true
  low?: true
  price?: true
  lastDayPrice?: true
  tomv?: true
  h52p?: true
  l52p?: true
  perx?: true
  pbrx?: true
  epsx?: true
  bpsx?: true
  tXprc?: true
  tXdif?: true
  tXrat?: true
  tRate?: true
  eIcod?: true
  regDate?: true
  _all?: true
}

export type StockPriceHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StockPriceHistory to aggregate.
   */
  where?: Prisma.StockPriceHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockPriceHistories to fetch.
   */
  orderBy?: Prisma.StockPriceHistoryOrderByWithRelationInput | Prisma.StockPriceHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StockPriceHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockPriceHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockPriceHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StockPriceHistories
  **/
  _count?: true | StockPriceHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: StockPriceHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: StockPriceHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StockPriceHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StockPriceHistoryMaxAggregateInputType
}

export type GetStockPriceHistoryAggregateType<T extends StockPriceHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateStockPriceHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStockPriceHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateStockPriceHistory[P]>
}




export type StockPriceHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StockPriceHistoryWhereInput
  orderBy?: Prisma.StockPriceHistoryOrderByWithAggregationInput | Prisma.StockPriceHistoryOrderByWithAggregationInput[]
  by: Prisma.StockPriceHistoryScalarFieldEnum[] | Prisma.StockPriceHistoryScalarFieldEnum
  having?: Prisma.StockPriceHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StockPriceHistoryCountAggregateInputType | true
  _avg?: StockPriceHistoryAvgAggregateInputType
  _sum?: StockPriceHistorySumAggregateInputType
  _min?: StockPriceHistoryMinAggregateInputType
  _max?: StockPriceHistoryMaxAggregateInputType
}

export type StockPriceHistoryGroupByOutputType = {
  priceIdx: number
  market: string
  stockCode: string
  open: string | null
  high: string | null
  low: string | null
  price: string | null
  lastDayPrice: string | null
  tomv: string | null
  h52p: string | null
  l52p: string | null
  perx: string | null
  pbrx: string | null
  epsx: string | null
  bpsx: string | null
  tXprc: string | null
  tXdif: string | null
  tXrat: string | null
  tRate: string | null
  eIcod: string | null
  regDate: Date | null
  _count: StockPriceHistoryCountAggregateOutputType | null
  _avg: StockPriceHistoryAvgAggregateOutputType | null
  _sum: StockPriceHistorySumAggregateOutputType | null
  _min: StockPriceHistoryMinAggregateOutputType | null
  _max: StockPriceHistoryMaxAggregateOutputType | null
}

type GetStockPriceHistoryGroupByPayload<T extends StockPriceHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StockPriceHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StockPriceHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StockPriceHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StockPriceHistoryGroupByOutputType[P]>
      }
    >
  >



export type StockPriceHistoryWhereInput = {
  AND?: Prisma.StockPriceHistoryWhereInput | Prisma.StockPriceHistoryWhereInput[]
  OR?: Prisma.StockPriceHistoryWhereInput[]
  NOT?: Prisma.StockPriceHistoryWhereInput | Prisma.StockPriceHistoryWhereInput[]
  priceIdx?: Prisma.IntFilter<"StockPriceHistory"> | number
  market?: Prisma.StringFilter<"StockPriceHistory"> | string
  stockCode?: Prisma.StringFilter<"StockPriceHistory"> | string
  open?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  high?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  low?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  price?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  lastDayPrice?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tomv?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  h52p?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  l52p?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  perx?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  pbrx?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  epsx?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  bpsx?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tXprc?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tXdif?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tXrat?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tRate?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  eIcod?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  regDate?: Prisma.DateTimeNullableFilter<"StockPriceHistory"> | Date | string | null
}

export type StockPriceHistoryOrderByWithRelationInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrderInput | Prisma.SortOrder
  high?: Prisma.SortOrderInput | Prisma.SortOrder
  low?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrderInput | Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrderInput | Prisma.SortOrder
  tomv?: Prisma.SortOrderInput | Prisma.SortOrder
  h52p?: Prisma.SortOrderInput | Prisma.SortOrder
  l52p?: Prisma.SortOrderInput | Prisma.SortOrder
  perx?: Prisma.SortOrderInput | Prisma.SortOrder
  pbrx?: Prisma.SortOrderInput | Prisma.SortOrder
  epsx?: Prisma.SortOrderInput | Prisma.SortOrder
  bpsx?: Prisma.SortOrderInput | Prisma.SortOrder
  tXprc?: Prisma.SortOrderInput | Prisma.SortOrder
  tXdif?: Prisma.SortOrderInput | Prisma.SortOrder
  tXrat?: Prisma.SortOrderInput | Prisma.SortOrder
  tRate?: Prisma.SortOrderInput | Prisma.SortOrder
  eIcod?: Prisma.SortOrderInput | Prisma.SortOrder
  regDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.StockPriceHistoryOrderByRelevanceInput
}

export type StockPriceHistoryWhereUniqueInput = Prisma.AtLeast<{
  priceIdx?: number
  AND?: Prisma.StockPriceHistoryWhereInput | Prisma.StockPriceHistoryWhereInput[]
  OR?: Prisma.StockPriceHistoryWhereInput[]
  NOT?: Prisma.StockPriceHistoryWhereInput | Prisma.StockPriceHistoryWhereInput[]
  market?: Prisma.StringFilter<"StockPriceHistory"> | string
  stockCode?: Prisma.StringFilter<"StockPriceHistory"> | string
  open?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  high?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  low?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  price?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  lastDayPrice?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tomv?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  h52p?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  l52p?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  perx?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  pbrx?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  epsx?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  bpsx?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tXprc?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tXdif?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tXrat?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  tRate?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  eIcod?: Prisma.StringNullableFilter<"StockPriceHistory"> | string | null
  regDate?: Prisma.DateTimeNullableFilter<"StockPriceHistory"> | Date | string | null
}, "priceIdx">

export type StockPriceHistoryOrderByWithAggregationInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrderInput | Prisma.SortOrder
  high?: Prisma.SortOrderInput | Prisma.SortOrder
  low?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrderInput | Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrderInput | Prisma.SortOrder
  tomv?: Prisma.SortOrderInput | Prisma.SortOrder
  h52p?: Prisma.SortOrderInput | Prisma.SortOrder
  l52p?: Prisma.SortOrderInput | Prisma.SortOrder
  perx?: Prisma.SortOrderInput | Prisma.SortOrder
  pbrx?: Prisma.SortOrderInput | Prisma.SortOrder
  epsx?: Prisma.SortOrderInput | Prisma.SortOrder
  bpsx?: Prisma.SortOrderInput | Prisma.SortOrder
  tXprc?: Prisma.SortOrderInput | Prisma.SortOrder
  tXdif?: Prisma.SortOrderInput | Prisma.SortOrder
  tXrat?: Prisma.SortOrderInput | Prisma.SortOrder
  tRate?: Prisma.SortOrderInput | Prisma.SortOrder
  eIcod?: Prisma.SortOrderInput | Prisma.SortOrder
  regDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.StockPriceHistoryCountOrderByAggregateInput
  _avg?: Prisma.StockPriceHistoryAvgOrderByAggregateInput
  _max?: Prisma.StockPriceHistoryMaxOrderByAggregateInput
  _min?: Prisma.StockPriceHistoryMinOrderByAggregateInput
  _sum?: Prisma.StockPriceHistorySumOrderByAggregateInput
}

export type StockPriceHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.StockPriceHistoryScalarWhereWithAggregatesInput | Prisma.StockPriceHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.StockPriceHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StockPriceHistoryScalarWhereWithAggregatesInput | Prisma.StockPriceHistoryScalarWhereWithAggregatesInput[]
  priceIdx?: Prisma.IntWithAggregatesFilter<"StockPriceHistory"> | number
  market?: Prisma.StringWithAggregatesFilter<"StockPriceHistory"> | string
  stockCode?: Prisma.StringWithAggregatesFilter<"StockPriceHistory"> | string
  open?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  high?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  low?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  price?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  lastDayPrice?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  tomv?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  h52p?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  l52p?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  perx?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  pbrx?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  epsx?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  bpsx?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  tXprc?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  tXdif?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  tXrat?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  tRate?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  eIcod?: Prisma.StringNullableWithAggregatesFilter<"StockPriceHistory"> | string | null
  regDate?: Prisma.DateTimeNullableWithAggregatesFilter<"StockPriceHistory"> | Date | string | null
}

export type StockPriceHistoryCreateInput = {
  market: string
  stockCode: string
  open?: string | null
  high?: string | null
  low?: string | null
  price?: string | null
  lastDayPrice?: string | null
  tomv?: string | null
  h52p?: string | null
  l52p?: string | null
  perx?: string | null
  pbrx?: string | null
  epsx?: string | null
  bpsx?: string | null
  tXprc?: string | null
  tXdif?: string | null
  tXrat?: string | null
  tRate?: string | null
  eIcod?: string | null
  regDate?: Date | string | null
}

export type StockPriceHistoryUncheckedCreateInput = {
  priceIdx?: number
  market: string
  stockCode: string
  open?: string | null
  high?: string | null
  low?: string | null
  price?: string | null
  lastDayPrice?: string | null
  tomv?: string | null
  h52p?: string | null
  l52p?: string | null
  perx?: string | null
  pbrx?: string | null
  epsx?: string | null
  bpsx?: string | null
  tXprc?: string | null
  tXdif?: string | null
  tXrat?: string | null
  tRate?: string | null
  eIcod?: string | null
  regDate?: Date | string | null
}

export type StockPriceHistoryUpdateInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  open?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  high?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  low?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastDayPrice?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tomv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  h52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  l52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  perx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pbrx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  epsx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bpsx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXprc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXdif?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXrat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  eIcod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type StockPriceHistoryUncheckedUpdateInput = {
  priceIdx?: Prisma.IntFieldUpdateOperationsInput | number
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  open?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  high?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  low?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastDayPrice?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tomv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  h52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  l52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  perx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pbrx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  epsx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bpsx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXprc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXdif?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXrat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  eIcod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type StockPriceHistoryCreateManyInput = {
  priceIdx?: number
  market: string
  stockCode: string
  open?: string | null
  high?: string | null
  low?: string | null
  price?: string | null
  lastDayPrice?: string | null
  tomv?: string | null
  h52p?: string | null
  l52p?: string | null
  perx?: string | null
  pbrx?: string | null
  epsx?: string | null
  bpsx?: string | null
  tXprc?: string | null
  tXdif?: string | null
  tXrat?: string | null
  tRate?: string | null
  eIcod?: string | null
  regDate?: Date | string | null
}

export type StockPriceHistoryUpdateManyMutationInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  open?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  high?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  low?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastDayPrice?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tomv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  h52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  l52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  perx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pbrx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  epsx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bpsx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXprc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXdif?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXrat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  eIcod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type StockPriceHistoryUncheckedUpdateManyInput = {
  priceIdx?: Prisma.IntFieldUpdateOperationsInput | number
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  open?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  high?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  low?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastDayPrice?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tomv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  h52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  l52p?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  perx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pbrx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  epsx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bpsx?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXprc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXdif?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tXrat?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  eIcod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type StockPriceHistoryOrderByRelevanceInput = {
  fields: Prisma.StockPriceHistoryOrderByRelevanceFieldEnum | Prisma.StockPriceHistoryOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type StockPriceHistoryCountOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrder
  high?: Prisma.SortOrder
  low?: Prisma.SortOrder
  price?: Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrder
  tomv?: Prisma.SortOrder
  h52p?: Prisma.SortOrder
  l52p?: Prisma.SortOrder
  perx?: Prisma.SortOrder
  pbrx?: Prisma.SortOrder
  epsx?: Prisma.SortOrder
  bpsx?: Prisma.SortOrder
  tXprc?: Prisma.SortOrder
  tXdif?: Prisma.SortOrder
  tXrat?: Prisma.SortOrder
  tRate?: Prisma.SortOrder
  eIcod?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
}

export type StockPriceHistoryAvgOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
}

export type StockPriceHistoryMaxOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrder
  high?: Prisma.SortOrder
  low?: Prisma.SortOrder
  price?: Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrder
  tomv?: Prisma.SortOrder
  h52p?: Prisma.SortOrder
  l52p?: Prisma.SortOrder
  perx?: Prisma.SortOrder
  pbrx?: Prisma.SortOrder
  epsx?: Prisma.SortOrder
  bpsx?: Prisma.SortOrder
  tXprc?: Prisma.SortOrder
  tXdif?: Prisma.SortOrder
  tXrat?: Prisma.SortOrder
  tRate?: Prisma.SortOrder
  eIcod?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
}

export type StockPriceHistoryMinOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  open?: Prisma.SortOrder
  high?: Prisma.SortOrder
  low?: Prisma.SortOrder
  price?: Prisma.SortOrder
  lastDayPrice?: Prisma.SortOrder
  tomv?: Prisma.SortOrder
  h52p?: Prisma.SortOrder
  l52p?: Prisma.SortOrder
  perx?: Prisma.SortOrder
  pbrx?: Prisma.SortOrder
  epsx?: Prisma.SortOrder
  bpsx?: Prisma.SortOrder
  tXprc?: Prisma.SortOrder
  tXdif?: Prisma.SortOrder
  tXrat?: Prisma.SortOrder
  tRate?: Prisma.SortOrder
  eIcod?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
}

export type StockPriceHistorySumOrderByAggregateInput = {
  priceIdx?: Prisma.SortOrder
}



export type StockPriceHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  priceIdx?: boolean
  market?: boolean
  stockCode?: boolean
  open?: boolean
  high?: boolean
  low?: boolean
  price?: boolean
  lastDayPrice?: boolean
  tomv?: boolean
  h52p?: boolean
  l52p?: boolean
  perx?: boolean
  pbrx?: boolean
  epsx?: boolean
  bpsx?: boolean
  tXprc?: boolean
  tXdif?: boolean
  tXrat?: boolean
  tRate?: boolean
  eIcod?: boolean
  regDate?: boolean
}, ExtArgs["result"]["stockPriceHistory"]>



export type StockPriceHistorySelectScalar = {
  priceIdx?: boolean
  market?: boolean
  stockCode?: boolean
  open?: boolean
  high?: boolean
  low?: boolean
  price?: boolean
  lastDayPrice?: boolean
  tomv?: boolean
  h52p?: boolean
  l52p?: boolean
  perx?: boolean
  pbrx?: boolean
  epsx?: boolean
  bpsx?: boolean
  tXprc?: boolean
  tXdif?: boolean
  tXrat?: boolean
  tRate?: boolean
  eIcod?: boolean
  regDate?: boolean
}

export type StockPriceHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"priceIdx" | "market" | "stockCode" | "open" | "high" | "low" | "price" | "lastDayPrice" | "tomv" | "h52p" | "l52p" | "perx" | "pbrx" | "epsx" | "bpsx" | "tXprc" | "tXdif" | "tXrat" | "tRate" | "eIcod" | "regDate", ExtArgs["result"]["stockPriceHistory"]>

export type $StockPriceHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StockPriceHistory"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    priceIdx: number
    market: string
    stockCode: string
    open: string | null
    high: string | null
    low: string | null
    price: string | null
    lastDayPrice: string | null
    tomv: string | null
    h52p: string | null
    l52p: string | null
    perx: string | null
    pbrx: string | null
    epsx: string | null
    bpsx: string | null
    tXprc: string | null
    tXdif: string | null
    tXrat: string | null
    tRate: string | null
    eIcod: string | null
    regDate: Date | null
  }, ExtArgs["result"]["stockPriceHistory"]>
  composites: {}
}

export type StockPriceHistoryGetPayload<S extends boolean | null | undefined | StockPriceHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload, S>

export type StockPriceHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StockPriceHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StockPriceHistoryCountAggregateInputType | true
  }

export interface StockPriceHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockPriceHistory'], meta: { name: 'StockPriceHistory' } }
  /**
   * Find zero or one StockPriceHistory that matches the filter.
   * @param {StockPriceHistoryFindUniqueArgs} args - Arguments to find a StockPriceHistory
   * @example
   * // Get one StockPriceHistory
   * const stockPriceHistory = await prisma.stockPriceHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StockPriceHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, StockPriceHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StockPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StockPriceHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StockPriceHistoryFindUniqueOrThrowArgs} args - Arguments to find a StockPriceHistory
   * @example
   * // Get one StockPriceHistory
   * const stockPriceHistory = await prisma.stockPriceHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StockPriceHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StockPriceHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StockPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StockPriceHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockPriceHistoryFindFirstArgs} args - Arguments to find a StockPriceHistory
   * @example
   * // Get one StockPriceHistory
   * const stockPriceHistory = await prisma.stockPriceHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StockPriceHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, StockPriceHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__StockPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StockPriceHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockPriceHistoryFindFirstOrThrowArgs} args - Arguments to find a StockPriceHistory
   * @example
   * // Get one StockPriceHistory
   * const stockPriceHistory = await prisma.stockPriceHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StockPriceHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StockPriceHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StockPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StockPriceHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockPriceHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StockPriceHistories
   * const stockPriceHistories = await prisma.stockPriceHistory.findMany()
   * 
   * // Get first 10 StockPriceHistories
   * const stockPriceHistories = await prisma.stockPriceHistory.findMany({ take: 10 })
   * 
   * // Only select the `priceIdx`
   * const stockPriceHistoryWithPriceIdxOnly = await prisma.stockPriceHistory.findMany({ select: { priceIdx: true } })
   * 
   */
  findMany<T extends StockPriceHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, StockPriceHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StockPriceHistory.
   * @param {StockPriceHistoryCreateArgs} args - Arguments to create a StockPriceHistory.
   * @example
   * // Create one StockPriceHistory
   * const StockPriceHistory = await prisma.stockPriceHistory.create({
   *   data: {
   *     // ... data to create a StockPriceHistory
   *   }
   * })
   * 
   */
  create<T extends StockPriceHistoryCreateArgs>(args: Prisma.SelectSubset<T, StockPriceHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__StockPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StockPriceHistories.
   * @param {StockPriceHistoryCreateManyArgs} args - Arguments to create many StockPriceHistories.
   * @example
   * // Create many StockPriceHistories
   * const stockPriceHistory = await prisma.stockPriceHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StockPriceHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, StockPriceHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a StockPriceHistory.
   * @param {StockPriceHistoryDeleteArgs} args - Arguments to delete one StockPriceHistory.
   * @example
   * // Delete one StockPriceHistory
   * const StockPriceHistory = await prisma.stockPriceHistory.delete({
   *   where: {
   *     // ... filter to delete one StockPriceHistory
   *   }
   * })
   * 
   */
  delete<T extends StockPriceHistoryDeleteArgs>(args: Prisma.SelectSubset<T, StockPriceHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__StockPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StockPriceHistory.
   * @param {StockPriceHistoryUpdateArgs} args - Arguments to update one StockPriceHistory.
   * @example
   * // Update one StockPriceHistory
   * const stockPriceHistory = await prisma.stockPriceHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StockPriceHistoryUpdateArgs>(args: Prisma.SelectSubset<T, StockPriceHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__StockPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StockPriceHistories.
   * @param {StockPriceHistoryDeleteManyArgs} args - Arguments to filter StockPriceHistories to delete.
   * @example
   * // Delete a few StockPriceHistories
   * const { count } = await prisma.stockPriceHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StockPriceHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, StockPriceHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StockPriceHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockPriceHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StockPriceHistories
   * const stockPriceHistory = await prisma.stockPriceHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StockPriceHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, StockPriceHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one StockPriceHistory.
   * @param {StockPriceHistoryUpsertArgs} args - Arguments to update or create a StockPriceHistory.
   * @example
   * // Update or create a StockPriceHistory
   * const stockPriceHistory = await prisma.stockPriceHistory.upsert({
   *   create: {
   *     // ... data to create a StockPriceHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StockPriceHistory we want to update
   *   }
   * })
   */
  upsert<T extends StockPriceHistoryUpsertArgs>(args: Prisma.SelectSubset<T, StockPriceHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__StockPriceHistoryClient<runtime.Types.Result.GetResult<Prisma.$StockPriceHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StockPriceHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockPriceHistoryCountArgs} args - Arguments to filter StockPriceHistories to count.
   * @example
   * // Count the number of StockPriceHistories
   * const count = await prisma.stockPriceHistory.count({
   *   where: {
   *     // ... the filter for the StockPriceHistories we want to count
   *   }
   * })
  **/
  count<T extends StockPriceHistoryCountArgs>(
    args?: Prisma.Subset<T, StockPriceHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StockPriceHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StockPriceHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockPriceHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StockPriceHistoryAggregateArgs>(args: Prisma.Subset<T, StockPriceHistoryAggregateArgs>): Prisma.PrismaPromise<GetStockPriceHistoryAggregateType<T>>

  /**
   * Group by StockPriceHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockPriceHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StockPriceHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StockPriceHistoryGroupByArgs['orderBy'] }
      : { orderBy?: StockPriceHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StockPriceHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockPriceHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StockPriceHistory model
 */
readonly fields: StockPriceHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StockPriceHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StockPriceHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StockPriceHistory model
 */
export interface StockPriceHistoryFieldRefs {
  readonly priceIdx: Prisma.FieldRef<"StockPriceHistory", 'Int'>
  readonly market: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly stockCode: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly open: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly high: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly low: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly price: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly lastDayPrice: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly tomv: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly h52p: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly l52p: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly perx: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly pbrx: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly epsx: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly bpsx: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly tXprc: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly tXdif: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly tXrat: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly tRate: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly eIcod: Prisma.FieldRef<"StockPriceHistory", 'String'>
  readonly regDate: Prisma.FieldRef<"StockPriceHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StockPriceHistory findUnique
 */
export type StockPriceHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which StockPriceHistory to fetch.
   */
  where: Prisma.StockPriceHistoryWhereUniqueInput
}

/**
 * StockPriceHistory findUniqueOrThrow
 */
export type StockPriceHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which StockPriceHistory to fetch.
   */
  where: Prisma.StockPriceHistoryWhereUniqueInput
}

/**
 * StockPriceHistory findFirst
 */
export type StockPriceHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which StockPriceHistory to fetch.
   */
  where?: Prisma.StockPriceHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockPriceHistories to fetch.
   */
  orderBy?: Prisma.StockPriceHistoryOrderByWithRelationInput | Prisma.StockPriceHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StockPriceHistories.
   */
  cursor?: Prisma.StockPriceHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockPriceHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockPriceHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StockPriceHistories.
   */
  distinct?: Prisma.StockPriceHistoryScalarFieldEnum | Prisma.StockPriceHistoryScalarFieldEnum[]
}

/**
 * StockPriceHistory findFirstOrThrow
 */
export type StockPriceHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which StockPriceHistory to fetch.
   */
  where?: Prisma.StockPriceHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockPriceHistories to fetch.
   */
  orderBy?: Prisma.StockPriceHistoryOrderByWithRelationInput | Prisma.StockPriceHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StockPriceHistories.
   */
  cursor?: Prisma.StockPriceHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockPriceHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockPriceHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StockPriceHistories.
   */
  distinct?: Prisma.StockPriceHistoryScalarFieldEnum | Prisma.StockPriceHistoryScalarFieldEnum[]
}

/**
 * StockPriceHistory findMany
 */
export type StockPriceHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter, which StockPriceHistories to fetch.
   */
  where?: Prisma.StockPriceHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockPriceHistories to fetch.
   */
  orderBy?: Prisma.StockPriceHistoryOrderByWithRelationInput | Prisma.StockPriceHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StockPriceHistories.
   */
  cursor?: Prisma.StockPriceHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockPriceHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockPriceHistories.
   */
  skip?: number
  distinct?: Prisma.StockPriceHistoryScalarFieldEnum | Prisma.StockPriceHistoryScalarFieldEnum[]
}

/**
 * StockPriceHistory create
 */
export type StockPriceHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * The data needed to create a StockPriceHistory.
   */
  data: Prisma.XOR<Prisma.StockPriceHistoryCreateInput, Prisma.StockPriceHistoryUncheckedCreateInput>
}

/**
 * StockPriceHistory createMany
 */
export type StockPriceHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StockPriceHistories.
   */
  data: Prisma.StockPriceHistoryCreateManyInput | Prisma.StockPriceHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StockPriceHistory update
 */
export type StockPriceHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * The data needed to update a StockPriceHistory.
   */
  data: Prisma.XOR<Prisma.StockPriceHistoryUpdateInput, Prisma.StockPriceHistoryUncheckedUpdateInput>
  /**
   * Choose, which StockPriceHistory to update.
   */
  where: Prisma.StockPriceHistoryWhereUniqueInput
}

/**
 * StockPriceHistory updateMany
 */
export type StockPriceHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StockPriceHistories.
   */
  data: Prisma.XOR<Prisma.StockPriceHistoryUpdateManyMutationInput, Prisma.StockPriceHistoryUncheckedUpdateManyInput>
  /**
   * Filter which StockPriceHistories to update
   */
  where?: Prisma.StockPriceHistoryWhereInput
  /**
   * Limit how many StockPriceHistories to update.
   */
  limit?: number
}

/**
 * StockPriceHistory upsert
 */
export type StockPriceHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * The filter to search for the StockPriceHistory to update in case it exists.
   */
  where: Prisma.StockPriceHistoryWhereUniqueInput
  /**
   * In case the StockPriceHistory found by the `where` argument doesn't exist, create a new StockPriceHistory with this data.
   */
  create: Prisma.XOR<Prisma.StockPriceHistoryCreateInput, Prisma.StockPriceHistoryUncheckedCreateInput>
  /**
   * In case the StockPriceHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StockPriceHistoryUpdateInput, Prisma.StockPriceHistoryUncheckedUpdateInput>
}

/**
 * StockPriceHistory delete
 */
export type StockPriceHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
  /**
   * Filter which StockPriceHistory to delete.
   */
  where: Prisma.StockPriceHistoryWhereUniqueInput
}

/**
 * StockPriceHistory deleteMany
 */
export type StockPriceHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StockPriceHistories to delete
   */
  where?: Prisma.StockPriceHistoryWhereInput
  /**
   * Limit how many StockPriceHistories to delete.
   */
  limit?: number
}

/**
 * StockPriceHistory without action
 */
export type StockPriceHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockPriceHistory
   */
  select?: Prisma.StockPriceHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockPriceHistory
   */
  omit?: Prisma.StockPriceHistoryOmit<ExtArgs> | null
}
