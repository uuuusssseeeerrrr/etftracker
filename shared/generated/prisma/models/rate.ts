
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `rate` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model rate
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type rateModel = runtime.Types.Result.DefaultSelection<Prisma.$ratePayload>

export type AggregateRate = {
  _count: RateCountAggregateOutputType | null
  _avg: RateAvgAggregateOutputType | null
  _sum: RateSumAggregateOutputType | null
  _min: RateMinAggregateOutputType | null
  _max: RateMaxAggregateOutputType | null
}

export type RateAvgAggregateOutputType = {
  rate_idx: number | null
  usd_rate: runtime.Decimal | null
  jpy_rate: runtime.Decimal | null
  eur_rate: runtime.Decimal | null
  sgd_rate: runtime.Decimal | null
}

export type RateSumAggregateOutputType = {
  rate_idx: number | null
  usd_rate: runtime.Decimal | null
  jpy_rate: runtime.Decimal | null
  eur_rate: runtime.Decimal | null
  sgd_rate: runtime.Decimal | null
}

export type RateMinAggregateOutputType = {
  rate_idx: number | null
  reg_date: Date | null
  usd_rate: runtime.Decimal | null
  jpy_rate: runtime.Decimal | null
  eur_rate: runtime.Decimal | null
  sgd_rate: runtime.Decimal | null
}

export type RateMaxAggregateOutputType = {
  rate_idx: number | null
  reg_date: Date | null
  usd_rate: runtime.Decimal | null
  jpy_rate: runtime.Decimal | null
  eur_rate: runtime.Decimal | null
  sgd_rate: runtime.Decimal | null
}

export type RateCountAggregateOutputType = {
  rate_idx: number
  reg_date: number
  usd_rate: number
  jpy_rate: number
  eur_rate: number
  sgd_rate: number
  _all: number
}


export type RateAvgAggregateInputType = {
  rate_idx?: true
  usd_rate?: true
  jpy_rate?: true
  eur_rate?: true
  sgd_rate?: true
}

export type RateSumAggregateInputType = {
  rate_idx?: true
  usd_rate?: true
  jpy_rate?: true
  eur_rate?: true
  sgd_rate?: true
}

export type RateMinAggregateInputType = {
  rate_idx?: true
  reg_date?: true
  usd_rate?: true
  jpy_rate?: true
  eur_rate?: true
  sgd_rate?: true
}

export type RateMaxAggregateInputType = {
  rate_idx?: true
  reg_date?: true
  usd_rate?: true
  jpy_rate?: true
  eur_rate?: true
  sgd_rate?: true
}

export type RateCountAggregateInputType = {
  rate_idx?: true
  reg_date?: true
  usd_rate?: true
  jpy_rate?: true
  eur_rate?: true
  sgd_rate?: true
  _all?: true
}

export type RateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which rate to aggregate.
   */
  where?: Prisma.rateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of rates to fetch.
   */
  orderBy?: Prisma.rateOrderByWithRelationInput | Prisma.rateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.rateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` rates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` rates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned rates
  **/
  _count?: true | RateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RateAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RateSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RateMaxAggregateInputType
}

export type GetRateAggregateType<T extends RateAggregateArgs> = {
      [P in keyof T & keyof AggregateRate]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRate[P]>
    : Prisma.GetScalarType<T[P], AggregateRate[P]>
}




export type rateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.rateWhereInput
  orderBy?: Prisma.rateOrderByWithAggregationInput | Prisma.rateOrderByWithAggregationInput[]
  by: Prisma.RateScalarFieldEnum[] | Prisma.RateScalarFieldEnum
  having?: Prisma.rateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RateCountAggregateInputType | true
  _avg?: RateAvgAggregateInputType
  _sum?: RateSumAggregateInputType
  _min?: RateMinAggregateInputType
  _max?: RateMaxAggregateInputType
}

export type RateGroupByOutputType = {
  rate_idx: number
  reg_date: Date
  usd_rate: runtime.Decimal | null
  jpy_rate: runtime.Decimal | null
  eur_rate: runtime.Decimal | null
  sgd_rate: runtime.Decimal | null
  _count: RateCountAggregateOutputType | null
  _avg: RateAvgAggregateOutputType | null
  _sum: RateSumAggregateOutputType | null
  _min: RateMinAggregateOutputType | null
  _max: RateMaxAggregateOutputType | null
}

type GetRateGroupByPayload<T extends rateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RateGroupByOutputType[P]>
      }
    >
  >



export type rateWhereInput = {
  AND?: Prisma.rateWhereInput | Prisma.rateWhereInput[]
  OR?: Prisma.rateWhereInput[]
  NOT?: Prisma.rateWhereInput | Prisma.rateWhereInput[]
  rate_idx?: Prisma.IntFilter<"rate"> | number
  reg_date?: Prisma.DateTimeFilter<"rate"> | Date | string
  usd_rate?: Prisma.DecimalNullableFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: Prisma.DecimalNullableFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: Prisma.DecimalNullableFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: Prisma.DecimalNullableFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateOrderByWithRelationInput = {
  rate_idx?: Prisma.SortOrder
  reg_date?: Prisma.SortOrder
  usd_rate?: Prisma.SortOrderInput | Prisma.SortOrder
  jpy_rate?: Prisma.SortOrderInput | Prisma.SortOrder
  eur_rate?: Prisma.SortOrderInput | Prisma.SortOrder
  sgd_rate?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type rateWhereUniqueInput = Prisma.AtLeast<{
  rate_idx?: number
  AND?: Prisma.rateWhereInput | Prisma.rateWhereInput[]
  OR?: Prisma.rateWhereInput[]
  NOT?: Prisma.rateWhereInput | Prisma.rateWhereInput[]
  reg_date?: Prisma.DateTimeFilter<"rate"> | Date | string
  usd_rate?: Prisma.DecimalNullableFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: Prisma.DecimalNullableFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: Prisma.DecimalNullableFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: Prisma.DecimalNullableFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}, "rate_idx">

export type rateOrderByWithAggregationInput = {
  rate_idx?: Prisma.SortOrder
  reg_date?: Prisma.SortOrder
  usd_rate?: Prisma.SortOrderInput | Prisma.SortOrder
  jpy_rate?: Prisma.SortOrderInput | Prisma.SortOrder
  eur_rate?: Prisma.SortOrderInput | Prisma.SortOrder
  sgd_rate?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.rateCountOrderByAggregateInput
  _avg?: Prisma.rateAvgOrderByAggregateInput
  _max?: Prisma.rateMaxOrderByAggregateInput
  _min?: Prisma.rateMinOrderByAggregateInput
  _sum?: Prisma.rateSumOrderByAggregateInput
}

export type rateScalarWhereWithAggregatesInput = {
  AND?: Prisma.rateScalarWhereWithAggregatesInput | Prisma.rateScalarWhereWithAggregatesInput[]
  OR?: Prisma.rateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.rateScalarWhereWithAggregatesInput | Prisma.rateScalarWhereWithAggregatesInput[]
  rate_idx?: Prisma.IntWithAggregatesFilter<"rate"> | number
  reg_date?: Prisma.DateTimeWithAggregatesFilter<"rate"> | Date | string
  usd_rate?: Prisma.DecimalNullableWithAggregatesFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: Prisma.DecimalNullableWithAggregatesFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: Prisma.DecimalNullableWithAggregatesFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: Prisma.DecimalNullableWithAggregatesFilter<"rate"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateCreateInput = {
  reg_date?: Date | string
  usd_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateUncheckedCreateInput = {
  rate_idx?: number
  reg_date?: Date | string
  usd_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateUpdateInput = {
  reg_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  usd_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateUncheckedUpdateInput = {
  rate_idx?: Prisma.IntFieldUpdateOperationsInput | number
  reg_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  usd_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateCreateManyInput = {
  rate_idx?: number
  reg_date?: Date | string
  usd_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateUpdateManyMutationInput = {
  reg_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  usd_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateUncheckedUpdateManyInput = {
  rate_idx?: Prisma.IntFieldUpdateOperationsInput | number
  reg_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  usd_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  jpy_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  eur_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sgd_rate?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type rateCountOrderByAggregateInput = {
  rate_idx?: Prisma.SortOrder
  reg_date?: Prisma.SortOrder
  usd_rate?: Prisma.SortOrder
  jpy_rate?: Prisma.SortOrder
  eur_rate?: Prisma.SortOrder
  sgd_rate?: Prisma.SortOrder
}

export type rateAvgOrderByAggregateInput = {
  rate_idx?: Prisma.SortOrder
  usd_rate?: Prisma.SortOrder
  jpy_rate?: Prisma.SortOrder
  eur_rate?: Prisma.SortOrder
  sgd_rate?: Prisma.SortOrder
}

export type rateMaxOrderByAggregateInput = {
  rate_idx?: Prisma.SortOrder
  reg_date?: Prisma.SortOrder
  usd_rate?: Prisma.SortOrder
  jpy_rate?: Prisma.SortOrder
  eur_rate?: Prisma.SortOrder
  sgd_rate?: Prisma.SortOrder
}

export type rateMinOrderByAggregateInput = {
  rate_idx?: Prisma.SortOrder
  reg_date?: Prisma.SortOrder
  usd_rate?: Prisma.SortOrder
  jpy_rate?: Prisma.SortOrder
  eur_rate?: Prisma.SortOrder
  sgd_rate?: Prisma.SortOrder
}

export type rateSumOrderByAggregateInput = {
  rate_idx?: Prisma.SortOrder
  usd_rate?: Prisma.SortOrder
  jpy_rate?: Prisma.SortOrder
  eur_rate?: Prisma.SortOrder
  sgd_rate?: Prisma.SortOrder
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableDecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}



export type rateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  rate_idx?: boolean
  reg_date?: boolean
  usd_rate?: boolean
  jpy_rate?: boolean
  eur_rate?: boolean
  sgd_rate?: boolean
}, ExtArgs["result"]["rate"]>



export type rateSelectScalar = {
  rate_idx?: boolean
  reg_date?: boolean
  usd_rate?: boolean
  jpy_rate?: boolean
  eur_rate?: boolean
  sgd_rate?: boolean
}

export type rateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"rate_idx" | "reg_date" | "usd_rate" | "jpy_rate" | "eur_rate" | "sgd_rate", ExtArgs["result"]["rate"]>

export type $ratePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "rate"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    rate_idx: number
    reg_date: Date
    usd_rate: runtime.Decimal | null
    jpy_rate: runtime.Decimal | null
    eur_rate: runtime.Decimal | null
    sgd_rate: runtime.Decimal | null
  }, ExtArgs["result"]["rate"]>
  composites: {}
}

export type rateGetPayload<S extends boolean | null | undefined | rateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ratePayload, S>

export type rateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<rateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RateCountAggregateInputType | true
  }

export interface rateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rate'], meta: { name: 'rate' } }
  /**
   * Find zero or one Rate that matches the filter.
   * @param {rateFindUniqueArgs} args - Arguments to find a Rate
   * @example
   * // Get one Rate
   * const rate = await prisma.rate.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends rateFindUniqueArgs>(args: Prisma.SelectSubset<T, rateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__rateClient<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Rate that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {rateFindUniqueOrThrowArgs} args - Arguments to find a Rate
   * @example
   * // Get one Rate
   * const rate = await prisma.rate.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends rateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, rateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__rateClient<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Rate that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateFindFirstArgs} args - Arguments to find a Rate
   * @example
   * // Get one Rate
   * const rate = await prisma.rate.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends rateFindFirstArgs>(args?: Prisma.SelectSubset<T, rateFindFirstArgs<ExtArgs>>): Prisma.Prisma__rateClient<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Rate that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateFindFirstOrThrowArgs} args - Arguments to find a Rate
   * @example
   * // Get one Rate
   * const rate = await prisma.rate.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends rateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, rateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__rateClient<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Rates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rates
   * const rates = await prisma.rate.findMany()
   * 
   * // Get first 10 Rates
   * const rates = await prisma.rate.findMany({ take: 10 })
   * 
   * // Only select the `rate_idx`
   * const rateWithRate_idxOnly = await prisma.rate.findMany({ select: { rate_idx: true } })
   * 
   */
  findMany<T extends rateFindManyArgs>(args?: Prisma.SelectSubset<T, rateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Rate.
   * @param {rateCreateArgs} args - Arguments to create a Rate.
   * @example
   * // Create one Rate
   * const Rate = await prisma.rate.create({
   *   data: {
   *     // ... data to create a Rate
   *   }
   * })
   * 
   */
  create<T extends rateCreateArgs>(args: Prisma.SelectSubset<T, rateCreateArgs<ExtArgs>>): Prisma.Prisma__rateClient<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Rates.
   * @param {rateCreateManyArgs} args - Arguments to create many Rates.
   * @example
   * // Create many Rates
   * const rate = await prisma.rate.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends rateCreateManyArgs>(args?: Prisma.SelectSubset<T, rateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Rate.
   * @param {rateDeleteArgs} args - Arguments to delete one Rate.
   * @example
   * // Delete one Rate
   * const Rate = await prisma.rate.delete({
   *   where: {
   *     // ... filter to delete one Rate
   *   }
   * })
   * 
   */
  delete<T extends rateDeleteArgs>(args: Prisma.SelectSubset<T, rateDeleteArgs<ExtArgs>>): Prisma.Prisma__rateClient<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Rate.
   * @param {rateUpdateArgs} args - Arguments to update one Rate.
   * @example
   * // Update one Rate
   * const rate = await prisma.rate.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends rateUpdateArgs>(args: Prisma.SelectSubset<T, rateUpdateArgs<ExtArgs>>): Prisma.Prisma__rateClient<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Rates.
   * @param {rateDeleteManyArgs} args - Arguments to filter Rates to delete.
   * @example
   * // Delete a few Rates
   * const { count } = await prisma.rate.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends rateDeleteManyArgs>(args?: Prisma.SelectSubset<T, rateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rates
   * const rate = await prisma.rate.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends rateUpdateManyArgs>(args: Prisma.SelectSubset<T, rateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Rate.
   * @param {rateUpsertArgs} args - Arguments to update or create a Rate.
   * @example
   * // Update or create a Rate
   * const rate = await prisma.rate.upsert({
   *   create: {
   *     // ... data to create a Rate
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Rate we want to update
   *   }
   * })
   */
  upsert<T extends rateUpsertArgs>(args: Prisma.SelectSubset<T, rateUpsertArgs<ExtArgs>>): Prisma.Prisma__rateClient<runtime.Types.Result.GetResult<Prisma.$ratePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Rates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateCountArgs} args - Arguments to filter Rates to count.
   * @example
   * // Count the number of Rates
   * const count = await prisma.rate.count({
   *   where: {
   *     // ... the filter for the Rates we want to count
   *   }
   * })
  **/
  count<T extends rateCountArgs>(
    args?: Prisma.Subset<T, rateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Rate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RateAggregateArgs>(args: Prisma.Subset<T, RateAggregateArgs>): Prisma.PrismaPromise<GetRateAggregateType<T>>

  /**
   * Group by Rate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends rateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: rateGroupByArgs['orderBy'] }
      : { orderBy?: rateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, rateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the rate model
 */
readonly fields: rateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for rate.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__rateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the rate model
 */
export interface rateFieldRefs {
  readonly rate_idx: Prisma.FieldRef<"rate", 'Int'>
  readonly reg_date: Prisma.FieldRef<"rate", 'DateTime'>
  readonly usd_rate: Prisma.FieldRef<"rate", 'Decimal'>
  readonly jpy_rate: Prisma.FieldRef<"rate", 'Decimal'>
  readonly eur_rate: Prisma.FieldRef<"rate", 'Decimal'>
  readonly sgd_rate: Prisma.FieldRef<"rate", 'Decimal'>
}
    

// Custom InputTypes
/**
 * rate findUnique
 */
export type rateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * Filter, which rate to fetch.
   */
  where: Prisma.rateWhereUniqueInput
}

/**
 * rate findUniqueOrThrow
 */
export type rateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * Filter, which rate to fetch.
   */
  where: Prisma.rateWhereUniqueInput
}

/**
 * rate findFirst
 */
export type rateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * Filter, which rate to fetch.
   */
  where?: Prisma.rateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of rates to fetch.
   */
  orderBy?: Prisma.rateOrderByWithRelationInput | Prisma.rateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for rates.
   */
  cursor?: Prisma.rateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` rates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` rates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of rates.
   */
  distinct?: Prisma.RateScalarFieldEnum | Prisma.RateScalarFieldEnum[]
}

/**
 * rate findFirstOrThrow
 */
export type rateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * Filter, which rate to fetch.
   */
  where?: Prisma.rateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of rates to fetch.
   */
  orderBy?: Prisma.rateOrderByWithRelationInput | Prisma.rateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for rates.
   */
  cursor?: Prisma.rateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` rates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` rates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of rates.
   */
  distinct?: Prisma.RateScalarFieldEnum | Prisma.RateScalarFieldEnum[]
}

/**
 * rate findMany
 */
export type rateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * Filter, which rates to fetch.
   */
  where?: Prisma.rateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of rates to fetch.
   */
  orderBy?: Prisma.rateOrderByWithRelationInput | Prisma.rateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing rates.
   */
  cursor?: Prisma.rateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` rates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` rates.
   */
  skip?: number
  distinct?: Prisma.RateScalarFieldEnum | Prisma.RateScalarFieldEnum[]
}

/**
 * rate create
 */
export type rateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * The data needed to create a rate.
   */
  data?: Prisma.XOR<Prisma.rateCreateInput, Prisma.rateUncheckedCreateInput>
}

/**
 * rate createMany
 */
export type rateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many rates.
   */
  data: Prisma.rateCreateManyInput | Prisma.rateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * rate update
 */
export type rateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * The data needed to update a rate.
   */
  data: Prisma.XOR<Prisma.rateUpdateInput, Prisma.rateUncheckedUpdateInput>
  /**
   * Choose, which rate to update.
   */
  where: Prisma.rateWhereUniqueInput
}

/**
 * rate updateMany
 */
export type rateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update rates.
   */
  data: Prisma.XOR<Prisma.rateUpdateManyMutationInput, Prisma.rateUncheckedUpdateManyInput>
  /**
   * Filter which rates to update
   */
  where?: Prisma.rateWhereInput
  /**
   * Limit how many rates to update.
   */
  limit?: number
}

/**
 * rate upsert
 */
export type rateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * The filter to search for the rate to update in case it exists.
   */
  where: Prisma.rateWhereUniqueInput
  /**
   * In case the rate found by the `where` argument doesn't exist, create a new rate with this data.
   */
  create: Prisma.XOR<Prisma.rateCreateInput, Prisma.rateUncheckedCreateInput>
  /**
   * In case the rate was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.rateUpdateInput, Prisma.rateUncheckedUpdateInput>
}

/**
 * rate delete
 */
export type rateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
  /**
   * Filter which rate to delete.
   */
  where: Prisma.rateWhereUniqueInput
}

/**
 * rate deleteMany
 */
export type rateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which rates to delete
   */
  where?: Prisma.rateWhereInput
  /**
   * Limit how many rates to delete.
   */
  limit?: number
}

/**
 * rate without action
 */
export type rateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rate
   */
  select?: Prisma.rateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rate
   */
  omit?: Prisma.rateOmit<ExtArgs> | null
}
