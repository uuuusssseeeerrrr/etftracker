
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StockList` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StockList
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type StockListModel = runtime.Types.Result.DefaultSelection<Prisma.$StockListPayload>

export type AggregateStockList = {
  _count: StockListCountAggregateOutputType | null
  _min: StockListMinAggregateOutputType | null
  _max: StockListMaxAggregateOutputType | null
}

export type StockListMinAggregateOutputType = {
  market: string | null
  stockCode: string | null
  stockName: string | null
  trCrcyCd: string | null
  buyUnitQty: string | null
  prdtName: string | null
  stockComment: string | null
  stdPdno: string | null
  isin_code: string | null
  regDate: Date | null
  modDate: Date | null
}

export type StockListMaxAggregateOutputType = {
  market: string | null
  stockCode: string | null
  stockName: string | null
  trCrcyCd: string | null
  buyUnitQty: string | null
  prdtName: string | null
  stockComment: string | null
  stdPdno: string | null
  isin_code: string | null
  regDate: Date | null
  modDate: Date | null
}

export type StockListCountAggregateOutputType = {
  market: number
  stockCode: number
  stockName: number
  trCrcyCd: number
  buyUnitQty: number
  prdtName: number
  stockComment: number
  stdPdno: number
  isin_code: number
  regDate: number
  modDate: number
  _all: number
}


export type StockListMinAggregateInputType = {
  market?: true
  stockCode?: true
  stockName?: true
  trCrcyCd?: true
  buyUnitQty?: true
  prdtName?: true
  stockComment?: true
  stdPdno?: true
  isin_code?: true
  regDate?: true
  modDate?: true
}

export type StockListMaxAggregateInputType = {
  market?: true
  stockCode?: true
  stockName?: true
  trCrcyCd?: true
  buyUnitQty?: true
  prdtName?: true
  stockComment?: true
  stdPdno?: true
  isin_code?: true
  regDate?: true
  modDate?: true
}

export type StockListCountAggregateInputType = {
  market?: true
  stockCode?: true
  stockName?: true
  trCrcyCd?: true
  buyUnitQty?: true
  prdtName?: true
  stockComment?: true
  stdPdno?: true
  isin_code?: true
  regDate?: true
  modDate?: true
  _all?: true
}

export type StockListAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StockList to aggregate.
   */
  where?: Prisma.StockListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockLists to fetch.
   */
  orderBy?: Prisma.StockListOrderByWithRelationInput | Prisma.StockListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StockListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StockLists
  **/
  _count?: true | StockListCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StockListMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StockListMaxAggregateInputType
}

export type GetStockListAggregateType<T extends StockListAggregateArgs> = {
      [P in keyof T & keyof AggregateStockList]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStockList[P]>
    : Prisma.GetScalarType<T[P], AggregateStockList[P]>
}




export type StockListGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StockListWhereInput
  orderBy?: Prisma.StockListOrderByWithAggregationInput | Prisma.StockListOrderByWithAggregationInput[]
  by: Prisma.StockListScalarFieldEnum[] | Prisma.StockListScalarFieldEnum
  having?: Prisma.StockListScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StockListCountAggregateInputType | true
  _min?: StockListMinAggregateInputType
  _max?: StockListMaxAggregateInputType
}

export type StockListGroupByOutputType = {
  market: string
  stockCode: string
  stockName: string | null
  trCrcyCd: string | null
  buyUnitQty: string | null
  prdtName: string | null
  stockComment: string | null
  stdPdno: string | null
  isin_code: string | null
  regDate: Date | null
  modDate: Date | null
  _count: StockListCountAggregateOutputType | null
  _min: StockListMinAggregateOutputType | null
  _max: StockListMaxAggregateOutputType | null
}

type GetStockListGroupByPayload<T extends StockListGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StockListGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StockListGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StockListGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StockListGroupByOutputType[P]>
      }
    >
  >



export type StockListWhereInput = {
  AND?: Prisma.StockListWhereInput | Prisma.StockListWhereInput[]
  OR?: Prisma.StockListWhereInput[]
  NOT?: Prisma.StockListWhereInput | Prisma.StockListWhereInput[]
  market?: Prisma.StringFilter<"StockList"> | string
  stockCode?: Prisma.StringFilter<"StockList"> | string
  stockName?: Prisma.StringNullableFilter<"StockList"> | string | null
  trCrcyCd?: Prisma.StringNullableFilter<"StockList"> | string | null
  buyUnitQty?: Prisma.StringNullableFilter<"StockList"> | string | null
  prdtName?: Prisma.StringNullableFilter<"StockList"> | string | null
  stockComment?: Prisma.StringNullableFilter<"StockList"> | string | null
  stdPdno?: Prisma.StringNullableFilter<"StockList"> | string | null
  isin_code?: Prisma.StringNullableFilter<"StockList"> | string | null
  regDate?: Prisma.DateTimeNullableFilter<"StockList"> | Date | string | null
  modDate?: Prisma.DateTimeNullableFilter<"StockList"> | Date | string | null
}

export type StockListOrderByWithRelationInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  stockName?: Prisma.SortOrderInput | Prisma.SortOrder
  trCrcyCd?: Prisma.SortOrderInput | Prisma.SortOrder
  buyUnitQty?: Prisma.SortOrderInput | Prisma.SortOrder
  prdtName?: Prisma.SortOrderInput | Prisma.SortOrder
  stockComment?: Prisma.SortOrderInput | Prisma.SortOrder
  stdPdno?: Prisma.SortOrderInput | Prisma.SortOrder
  isin_code?: Prisma.SortOrderInput | Prisma.SortOrder
  regDate?: Prisma.SortOrderInput | Prisma.SortOrder
  modDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.StockListOrderByRelevanceInput
}

export type StockListWhereUniqueInput = Prisma.AtLeast<{
  market_stockCode?: Prisma.StockListMarketStockCodeCompoundUniqueInput
  AND?: Prisma.StockListWhereInput | Prisma.StockListWhereInput[]
  OR?: Prisma.StockListWhereInput[]
  NOT?: Prisma.StockListWhereInput | Prisma.StockListWhereInput[]
  market?: Prisma.StringFilter<"StockList"> | string
  stockCode?: Prisma.StringFilter<"StockList"> | string
  stockName?: Prisma.StringNullableFilter<"StockList"> | string | null
  trCrcyCd?: Prisma.StringNullableFilter<"StockList"> | string | null
  buyUnitQty?: Prisma.StringNullableFilter<"StockList"> | string | null
  prdtName?: Prisma.StringNullableFilter<"StockList"> | string | null
  stockComment?: Prisma.StringNullableFilter<"StockList"> | string | null
  stdPdno?: Prisma.StringNullableFilter<"StockList"> | string | null
  isin_code?: Prisma.StringNullableFilter<"StockList"> | string | null
  regDate?: Prisma.DateTimeNullableFilter<"StockList"> | Date | string | null
  modDate?: Prisma.DateTimeNullableFilter<"StockList"> | Date | string | null
}, "market_stockCode">

export type StockListOrderByWithAggregationInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  stockName?: Prisma.SortOrderInput | Prisma.SortOrder
  trCrcyCd?: Prisma.SortOrderInput | Prisma.SortOrder
  buyUnitQty?: Prisma.SortOrderInput | Prisma.SortOrder
  prdtName?: Prisma.SortOrderInput | Prisma.SortOrder
  stockComment?: Prisma.SortOrderInput | Prisma.SortOrder
  stdPdno?: Prisma.SortOrderInput | Prisma.SortOrder
  isin_code?: Prisma.SortOrderInput | Prisma.SortOrder
  regDate?: Prisma.SortOrderInput | Prisma.SortOrder
  modDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.StockListCountOrderByAggregateInput
  _max?: Prisma.StockListMaxOrderByAggregateInput
  _min?: Prisma.StockListMinOrderByAggregateInput
}

export type StockListScalarWhereWithAggregatesInput = {
  AND?: Prisma.StockListScalarWhereWithAggregatesInput | Prisma.StockListScalarWhereWithAggregatesInput[]
  OR?: Prisma.StockListScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StockListScalarWhereWithAggregatesInput | Prisma.StockListScalarWhereWithAggregatesInput[]
  market?: Prisma.StringWithAggregatesFilter<"StockList"> | string
  stockCode?: Prisma.StringWithAggregatesFilter<"StockList"> | string
  stockName?: Prisma.StringNullableWithAggregatesFilter<"StockList"> | string | null
  trCrcyCd?: Prisma.StringNullableWithAggregatesFilter<"StockList"> | string | null
  buyUnitQty?: Prisma.StringNullableWithAggregatesFilter<"StockList"> | string | null
  prdtName?: Prisma.StringNullableWithAggregatesFilter<"StockList"> | string | null
  stockComment?: Prisma.StringNullableWithAggregatesFilter<"StockList"> | string | null
  stdPdno?: Prisma.StringNullableWithAggregatesFilter<"StockList"> | string | null
  isin_code?: Prisma.StringNullableWithAggregatesFilter<"StockList"> | string | null
  regDate?: Prisma.DateTimeNullableWithAggregatesFilter<"StockList"> | Date | string | null
  modDate?: Prisma.DateTimeNullableWithAggregatesFilter<"StockList"> | Date | string | null
}

export type StockListCreateInput = {
  market?: string
  stockCode?: string
  stockName?: string | null
  trCrcyCd?: string | null
  buyUnitQty?: string | null
  prdtName?: string | null
  stockComment?: string | null
  stdPdno?: string | null
  isin_code?: string | null
  regDate?: Date | string | null
  modDate?: Date | string | null
}

export type StockListUncheckedCreateInput = {
  market?: string
  stockCode?: string
  stockName?: string | null
  trCrcyCd?: string | null
  buyUnitQty?: string | null
  prdtName?: string | null
  stockComment?: string | null
  stdPdno?: string | null
  isin_code?: string | null
  regDate?: Date | string | null
  modDate?: Date | string | null
}

export type StockListUpdateInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  stockName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trCrcyCd?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buyUnitQty?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prdtName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stockComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type StockListUncheckedUpdateInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  stockName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trCrcyCd?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buyUnitQty?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prdtName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stockComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type StockListCreateManyInput = {
  market?: string
  stockCode?: string
  stockName?: string | null
  trCrcyCd?: string | null
  buyUnitQty?: string | null
  prdtName?: string | null
  stockComment?: string | null
  stdPdno?: string | null
  isin_code?: string | null
  regDate?: Date | string | null
  modDate?: Date | string | null
}

export type StockListUpdateManyMutationInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  stockName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trCrcyCd?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buyUnitQty?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prdtName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stockComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type StockListUncheckedUpdateManyInput = {
  market?: Prisma.StringFieldUpdateOperationsInput | string
  stockCode?: Prisma.StringFieldUpdateOperationsInput | string
  stockName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trCrcyCd?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buyUnitQty?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prdtName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stockComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdPdno?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isin_code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  regDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  modDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type StockListOrderByRelevanceInput = {
  fields: Prisma.StockListOrderByRelevanceFieldEnum | Prisma.StockListOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type StockListMarketStockCodeCompoundUniqueInput = {
  market: string
  stockCode: string
}

export type StockListCountOrderByAggregateInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  stockName?: Prisma.SortOrder
  trCrcyCd?: Prisma.SortOrder
  buyUnitQty?: Prisma.SortOrder
  prdtName?: Prisma.SortOrder
  stockComment?: Prisma.SortOrder
  stdPdno?: Prisma.SortOrder
  isin_code?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
  modDate?: Prisma.SortOrder
}

export type StockListMaxOrderByAggregateInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  stockName?: Prisma.SortOrder
  trCrcyCd?: Prisma.SortOrder
  buyUnitQty?: Prisma.SortOrder
  prdtName?: Prisma.SortOrder
  stockComment?: Prisma.SortOrder
  stdPdno?: Prisma.SortOrder
  isin_code?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
  modDate?: Prisma.SortOrder
}

export type StockListMinOrderByAggregateInput = {
  market?: Prisma.SortOrder
  stockCode?: Prisma.SortOrder
  stockName?: Prisma.SortOrder
  trCrcyCd?: Prisma.SortOrder
  buyUnitQty?: Prisma.SortOrder
  prdtName?: Prisma.SortOrder
  stockComment?: Prisma.SortOrder
  stdPdno?: Prisma.SortOrder
  isin_code?: Prisma.SortOrder
  regDate?: Prisma.SortOrder
  modDate?: Prisma.SortOrder
}



export type StockListSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  market?: boolean
  stockCode?: boolean
  stockName?: boolean
  trCrcyCd?: boolean
  buyUnitQty?: boolean
  prdtName?: boolean
  stockComment?: boolean
  stdPdno?: boolean
  isin_code?: boolean
  regDate?: boolean
  modDate?: boolean
}, ExtArgs["result"]["stockList"]>



export type StockListSelectScalar = {
  market?: boolean
  stockCode?: boolean
  stockName?: boolean
  trCrcyCd?: boolean
  buyUnitQty?: boolean
  prdtName?: boolean
  stockComment?: boolean
  stdPdno?: boolean
  isin_code?: boolean
  regDate?: boolean
  modDate?: boolean
}

export type StockListOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"market" | "stockCode" | "stockName" | "trCrcyCd" | "buyUnitQty" | "prdtName" | "stockComment" | "stdPdno" | "isin_code" | "regDate" | "modDate", ExtArgs["result"]["stockList"]>

export type $StockListPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StockList"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    market: string
    stockCode: string
    stockName: string | null
    trCrcyCd: string | null
    buyUnitQty: string | null
    prdtName: string | null
    stockComment: string | null
    stdPdno: string | null
    isin_code: string | null
    regDate: Date | null
    modDate: Date | null
  }, ExtArgs["result"]["stockList"]>
  composites: {}
}

export type StockListGetPayload<S extends boolean | null | undefined | StockListDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StockListPayload, S>

export type StockListCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StockListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StockListCountAggregateInputType | true
  }

export interface StockListDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockList'], meta: { name: 'StockList' } }
  /**
   * Find zero or one StockList that matches the filter.
   * @param {StockListFindUniqueArgs} args - Arguments to find a StockList
   * @example
   * // Get one StockList
   * const stockList = await prisma.stockList.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StockListFindUniqueArgs>(args: Prisma.SelectSubset<T, StockListFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StockListClient<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StockList that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StockListFindUniqueOrThrowArgs} args - Arguments to find a StockList
   * @example
   * // Get one StockList
   * const stockList = await prisma.stockList.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StockListFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StockListFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StockListClient<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StockList that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockListFindFirstArgs} args - Arguments to find a StockList
   * @example
   * // Get one StockList
   * const stockList = await prisma.stockList.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StockListFindFirstArgs>(args?: Prisma.SelectSubset<T, StockListFindFirstArgs<ExtArgs>>): Prisma.Prisma__StockListClient<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StockList that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockListFindFirstOrThrowArgs} args - Arguments to find a StockList
   * @example
   * // Get one StockList
   * const stockList = await prisma.stockList.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StockListFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StockListFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StockListClient<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StockLists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockListFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StockLists
   * const stockLists = await prisma.stockList.findMany()
   * 
   * // Get first 10 StockLists
   * const stockLists = await prisma.stockList.findMany({ take: 10 })
   * 
   * // Only select the `market`
   * const stockListWithMarketOnly = await prisma.stockList.findMany({ select: { market: true } })
   * 
   */
  findMany<T extends StockListFindManyArgs>(args?: Prisma.SelectSubset<T, StockListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StockList.
   * @param {StockListCreateArgs} args - Arguments to create a StockList.
   * @example
   * // Create one StockList
   * const StockList = await prisma.stockList.create({
   *   data: {
   *     // ... data to create a StockList
   *   }
   * })
   * 
   */
  create<T extends StockListCreateArgs>(args: Prisma.SelectSubset<T, StockListCreateArgs<ExtArgs>>): Prisma.Prisma__StockListClient<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StockLists.
   * @param {StockListCreateManyArgs} args - Arguments to create many StockLists.
   * @example
   * // Create many StockLists
   * const stockList = await prisma.stockList.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StockListCreateManyArgs>(args?: Prisma.SelectSubset<T, StockListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a StockList.
   * @param {StockListDeleteArgs} args - Arguments to delete one StockList.
   * @example
   * // Delete one StockList
   * const StockList = await prisma.stockList.delete({
   *   where: {
   *     // ... filter to delete one StockList
   *   }
   * })
   * 
   */
  delete<T extends StockListDeleteArgs>(args: Prisma.SelectSubset<T, StockListDeleteArgs<ExtArgs>>): Prisma.Prisma__StockListClient<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StockList.
   * @param {StockListUpdateArgs} args - Arguments to update one StockList.
   * @example
   * // Update one StockList
   * const stockList = await prisma.stockList.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StockListUpdateArgs>(args: Prisma.SelectSubset<T, StockListUpdateArgs<ExtArgs>>): Prisma.Prisma__StockListClient<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StockLists.
   * @param {StockListDeleteManyArgs} args - Arguments to filter StockLists to delete.
   * @example
   * // Delete a few StockLists
   * const { count } = await prisma.stockList.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StockListDeleteManyArgs>(args?: Prisma.SelectSubset<T, StockListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StockLists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockListUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StockLists
   * const stockList = await prisma.stockList.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StockListUpdateManyArgs>(args: Prisma.SelectSubset<T, StockListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one StockList.
   * @param {StockListUpsertArgs} args - Arguments to update or create a StockList.
   * @example
   * // Update or create a StockList
   * const stockList = await prisma.stockList.upsert({
   *   create: {
   *     // ... data to create a StockList
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StockList we want to update
   *   }
   * })
   */
  upsert<T extends StockListUpsertArgs>(args: Prisma.SelectSubset<T, StockListUpsertArgs<ExtArgs>>): Prisma.Prisma__StockListClient<runtime.Types.Result.GetResult<Prisma.$StockListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StockLists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockListCountArgs} args - Arguments to filter StockLists to count.
   * @example
   * // Count the number of StockLists
   * const count = await prisma.stockList.count({
   *   where: {
   *     // ... the filter for the StockLists we want to count
   *   }
   * })
  **/
  count<T extends StockListCountArgs>(
    args?: Prisma.Subset<T, StockListCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StockListCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StockList.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StockListAggregateArgs>(args: Prisma.Subset<T, StockListAggregateArgs>): Prisma.PrismaPromise<GetStockListAggregateType<T>>

  /**
   * Group by StockList.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockListGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StockListGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StockListGroupByArgs['orderBy'] }
      : { orderBy?: StockListGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StockListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StockList model
 */
readonly fields: StockListFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StockList.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StockListClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StockList model
 */
export interface StockListFieldRefs {
  readonly market: Prisma.FieldRef<"StockList", 'String'>
  readonly stockCode: Prisma.FieldRef<"StockList", 'String'>
  readonly stockName: Prisma.FieldRef<"StockList", 'String'>
  readonly trCrcyCd: Prisma.FieldRef<"StockList", 'String'>
  readonly buyUnitQty: Prisma.FieldRef<"StockList", 'String'>
  readonly prdtName: Prisma.FieldRef<"StockList", 'String'>
  readonly stockComment: Prisma.FieldRef<"StockList", 'String'>
  readonly stdPdno: Prisma.FieldRef<"StockList", 'String'>
  readonly isin_code: Prisma.FieldRef<"StockList", 'String'>
  readonly regDate: Prisma.FieldRef<"StockList", 'DateTime'>
  readonly modDate: Prisma.FieldRef<"StockList", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StockList findUnique
 */
export type StockListFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * Filter, which StockList to fetch.
   */
  where: Prisma.StockListWhereUniqueInput
}

/**
 * StockList findUniqueOrThrow
 */
export type StockListFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * Filter, which StockList to fetch.
   */
  where: Prisma.StockListWhereUniqueInput
}

/**
 * StockList findFirst
 */
export type StockListFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * Filter, which StockList to fetch.
   */
  where?: Prisma.StockListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockLists to fetch.
   */
  orderBy?: Prisma.StockListOrderByWithRelationInput | Prisma.StockListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StockLists.
   */
  cursor?: Prisma.StockListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StockLists.
   */
  distinct?: Prisma.StockListScalarFieldEnum | Prisma.StockListScalarFieldEnum[]
}

/**
 * StockList findFirstOrThrow
 */
export type StockListFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * Filter, which StockList to fetch.
   */
  where?: Prisma.StockListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockLists to fetch.
   */
  orderBy?: Prisma.StockListOrderByWithRelationInput | Prisma.StockListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StockLists.
   */
  cursor?: Prisma.StockListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StockLists.
   */
  distinct?: Prisma.StockListScalarFieldEnum | Prisma.StockListScalarFieldEnum[]
}

/**
 * StockList findMany
 */
export type StockListFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * Filter, which StockLists to fetch.
   */
  where?: Prisma.StockListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockLists to fetch.
   */
  orderBy?: Prisma.StockListOrderByWithRelationInput | Prisma.StockListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StockLists.
   */
  cursor?: Prisma.StockListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockLists.
   */
  skip?: number
  distinct?: Prisma.StockListScalarFieldEnum | Prisma.StockListScalarFieldEnum[]
}

/**
 * StockList create
 */
export type StockListCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * The data needed to create a StockList.
   */
  data?: Prisma.XOR<Prisma.StockListCreateInput, Prisma.StockListUncheckedCreateInput>
}

/**
 * StockList createMany
 */
export type StockListCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StockLists.
   */
  data: Prisma.StockListCreateManyInput | Prisma.StockListCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StockList update
 */
export type StockListUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * The data needed to update a StockList.
   */
  data: Prisma.XOR<Prisma.StockListUpdateInput, Prisma.StockListUncheckedUpdateInput>
  /**
   * Choose, which StockList to update.
   */
  where: Prisma.StockListWhereUniqueInput
}

/**
 * StockList updateMany
 */
export type StockListUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StockLists.
   */
  data: Prisma.XOR<Prisma.StockListUpdateManyMutationInput, Prisma.StockListUncheckedUpdateManyInput>
  /**
   * Filter which StockLists to update
   */
  where?: Prisma.StockListWhereInput
  /**
   * Limit how many StockLists to update.
   */
  limit?: number
}

/**
 * StockList upsert
 */
export type StockListUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * The filter to search for the StockList to update in case it exists.
   */
  where: Prisma.StockListWhereUniqueInput
  /**
   * In case the StockList found by the `where` argument doesn't exist, create a new StockList with this data.
   */
  create: Prisma.XOR<Prisma.StockListCreateInput, Prisma.StockListUncheckedCreateInput>
  /**
   * In case the StockList was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StockListUpdateInput, Prisma.StockListUncheckedUpdateInput>
}

/**
 * StockList delete
 */
export type StockListDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
  /**
   * Filter which StockList to delete.
   */
  where: Prisma.StockListWhereUniqueInput
}

/**
 * StockList deleteMany
 */
export type StockListDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StockLists to delete
   */
  where?: Prisma.StockListWhereInput
  /**
   * Limit how many StockLists to delete.
   */
  limit?: number
}

/**
 * StockList without action
 */
export type StockListDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockList
   */
  select?: Prisma.StockListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockList
   */
  omit?: Prisma.StockListOmit<ExtArgs> | null
}
